{"metadata":"{\"compiler\":{\"version\":\"0.7.6\"},\"sources\":{\"contracts/SonOfASwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\n// V3 SwapRouter\\n// import \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\n// V2V3 SwapRouter\\nimport \\\"@uniswap/swap-router-contracts/contracts/interfaces/ISwapRouter02.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct SwapOrder {\\n    address router;\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    string tradeType; // enum? // \\\"v3_exactInputSingle\\\" | \\\"v3_exactOutputSingle\\\" | \\\"v3_exactInput\\\" | \\\"v3_exactOutput\\\" | \\\"v2_swapExactTokensForTokens\\\" | \\\"v2_swapTokensForExactTokens\\\"\\n    address recipient;\\n    address[] path;\\n    uint256 deadline;\\n    // v3\\n    uint256 sqrtPriceLimitX96; // uint160 represented as uint256 for golang compatibility // TODO: remove casting (fix golang lib)\\n    uint256 fee; // uint24 represented as uint256 for golang compatibility // TODO: remove casting (fix golang lib)\\n    // TODO: use fee[] since pools in the path might have different fees\\n    uint256 nonce;\\n}\\n\\ncontract SonOfASwap {\\n    uint256 public status;\\n    address private owner;\\n    mapping(address => uint256) public nonces;\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    string private constant EIP712_DOMAIN =\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n    string private constant SWAPORDER =\\n        \\\"SwapOrder(address router,uint256 amountIn,uint256 amountOut,string tradeType,address recipient,address[] path,uint deadline,uint256 sqrtPriceLimitX96,uint256 fee,uint256 nonce)\\\";\\n\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(abi.encodePacked(EIP712_DOMAIN));\\n    bytes32 private constant SWAPORDER_TYPEHASH =\\n        keccak256(abi.encodePacked(SWAPORDER));\\n\\n    bytes32 private DOMAIN_SEPARATOR;\\n\\n    function getChainID() internal pure returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n        status = 0;\\n        DOMAIN_SEPARATOR = hash(\\n            EIP712Domain({\\n                name: \\\"SonOfASwap\\\",\\n                version: \\\"1\\\",\\n                chainId: getChainID(),\\n                verifyingContract: address(this)\\n            })\\n        );\\n    }\\n\\n    receive() external payable {}\\n\\n    function hash(EIP712Domain memory eip712Domain)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(bytes(eip712Domain.name)),\\n                    keccak256(bytes(eip712Domain.version)),\\n                    eip712Domain.chainId,\\n                    eip712Domain.verifyingContract\\n                )\\n            );\\n    }\\n\\n    function hash(SwapOrder memory order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    SWAPORDER_TYPEHASH,\\n                    order.router,\\n                    order.amountIn,\\n                    order.amountOut,\\n                    keccak256(bytes(order.tradeType)),\\n                    order.recipient,\\n                    keccak256(abi.encodePacked(order.path)),\\n                    order.deadline,\\n                    order.sqrtPriceLimitX96,\\n                    order.fee,\\n                    order.nonce\\n                )\\n            );\\n    }\\n\\n    function verify(\\n        SwapOrder memory order,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool) {\\n        // Note: we need to use `encodePacked` here instead of `encode`.\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hash(order))\\n        );\\n        address recovered = ecrecover(digest, v, r, s);\\n        return recovered == order.recipient;\\n    }\\n\\n    function stringsEqual(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (keccak256(abi.encodePacked((a))) ==\\n            keccak256(abi.encodePacked((b))));\\n    }\\n\\n    /**\\n    Encodes multihop V3 path.\\n    https://docs.uniswap.org/protocol/guides/swaps/multihop-swaps\\n    */\\n    function encodeMultihopPath(address[] memory path, uint24 fee)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory encodedPath;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            encodedPath = abi.encodePacked(encodedPath, path[i]);\\n            if (i < path.length - 1) {\\n                // path = abi.encodePacked(path, fees[i]); // TODO <<\\n                encodedPath = abi.encodePacked(encodedPath, fee);\\n            }\\n        }\\n        return encodedPath;\\n    }\\n\\n    function sendOrder(SwapOrder memory order) internal {\\n        // instantiate router interface\\n        ISwapRouter02 router = ISwapRouter02(order.router);\\n        // instantiate input token interface\\n        IERC20 tokenIn = IERC20(order.path[0]);\\n\\n        // transfer input token from user to (this)\\n        tokenIn.transferFrom(order.recipient, address(this), order.amountIn);\\n        // TODO: deal with refunds due to slippage (and later, realized MEV)\\n\\n        // approve router to spend (this) tokenIn\\n        tokenIn.approve(order.router, order.amountIn);\\n\\n        // choose router method based on order type\\n        if (stringsEqual(order.tradeType, \\\"v3_exactInputSingle\\\")) {\\n            // encode function params based on order\\n            IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\\n                .ExactInputSingleParams(\\n                    order.path[0], // tokenIn\\n                    order.path[1], // tokenOut\\n                    uint24(order.fee), // fee\\n                    order.recipient, // recipient\\n                    // order.deadline, // deadline\\n                    order.amountIn, // amountIn\\n                    order.amountOut, // amountOutMinimum\\n                    uint160(order.sqrtPriceLimitX96) // sqrtPriceLimitX96\\n                );\\n\\n            // send order to router\\n            router.exactInputSingle{value: 0x0}(params);\\n        } else if (stringsEqual(order.tradeType, \\\"v3_exactOutputSingle\\\")) {\\n            IV3SwapRouter.ExactOutputSingleParams memory params = IV3SwapRouter\\n                .ExactOutputSingleParams(\\n                    order.path[0], // tokenIn\\n                    order.path[1], // tokenOut\\n                    uint24(order.fee), // fee\\n                    order.recipient, // recipient\\n                    // order.deadline, // deadline\\n                    order.amountOut, // amountOut\\n                    order.amountIn, // amountInMaximum\\n                    uint160(order.sqrtPriceLimitX96) // sqrtPriceLimitX96\\n                );\\n\\n            router.exactOutputSingle{value: 0x0}(params);\\n        } else if (stringsEqual(order.tradeType, \\\"v3_exactInput\\\")) {\\n            IV3SwapRouter.ExactInputParams memory params = IV3SwapRouter\\n                .ExactInputParams(\\n                    encodeMultihopPath(order.path, uint24(order.fee)), // path\\n                    order.recipient, // recipient\\n                    // order.deadline, // deadline\\n                    order.amountIn, // amountIn\\n                    order.amountOut // amountOutMinimum\\n                );\\n            router.exactInput{value: 0x0}(params);\\n        } else if (stringsEqual(order.tradeType, \\\"v3_exactOutput\\\")) {\\n            IV3SwapRouter.ExactOutputParams memory params = IV3SwapRouter\\n                .ExactOutputParams(\\n                    encodeMultihopPath(order.path, uint24(order.fee)), // path\\n                    order.recipient, // recipient\\n                    // order.deadline, // deadline\\n                    order.amountOut, // amountOut\\n                    order.amountIn // amountInMaximum\\n                );\\n            router.exactOutput{value: 0x0}(params);\\n        } else if (\\n            stringsEqual(order.tradeType, \\\"v2_swapExactTokensForTokens\\\")\\n        ) {\\n            router.swapExactTokensForTokens{value: 0x0}(\\n                order.amountIn, // amountIn\\n                order.amountOut, // amountOutMin\\n                order.path, // path\\n                order.recipient // to\\n            );\\n        } else if (\\n            stringsEqual(order.tradeType, \\\"v2_swapTokensForExactTokens\\\")\\n        ) {\\n            router.swapTokensForExactTokens{value: 0x0}(\\n                order.amountOut, // amountOut\\n                order.amountIn, // amountInMax\\n                order.path, // path\\n                order.recipient // to\\n            );\\n        } else {\\n            revert(\\\"METHOD_DNE\\\");\\n        }\\n    }\\n\\n    function verifyAndSend(\\n        SwapOrder memory order,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        require(verify(order, v, r, s), \\\"invalid signature\\\");\\n        if (order.nonce == nonces[order.recipient]) {\\n            sendOrder(order);\\n            nonces[order.recipient] += 1;\\n        } else {\\n            revert(\\\"INVALID_NONCE\\\");\\n        }\\n    }\\n\\n    // liquidate assets from this contract (for testing purposes only)\\n    function liquidate(address tokenAddress) public {\\n        require(msg.sender == owner);\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 balance = token.balanceOf(address(this));\\n        token.transfer(msg.sender, balance);\\n    }\\n}\\n\"},\"@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\ninterface ISelfPermit {\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\"},\"@uniswap/swap-router-contracts/contracts/interfaces/IV2SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V2\\ninterface IV2SwapRouter {\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param amountIn The amount of token to swap\\n    /// @param amountOutMin The minimum amount of output that must be received\\n    /// @param path The ordered list of tokens to swap through\\n    /// @param to The recipient address\\n    /// @return amountOut The amount of the received token\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to\\n    ) external payable returns (uint256 amountOut);\\n\\n    /// @notice Swaps as little as possible of one token for an exact amount of another token\\n    /// @param amountOut The amount of token to swap for\\n    /// @param amountInMax The maximum amount of input that the caller will pay\\n    /// @param path The ordered list of tokens to swap through\\n    /// @param to The recipient address\\n    /// @return amountIn The amount of token to pay\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to\\n    ) external payable returns (uint256 amountIn);\\n}\\n\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"@uniswap/swap-router-contracts/contracts/interfaces/IV3SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IV3SwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"},\"@uniswap/swap-router-contracts/contracts/interfaces/IApproveAndCall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\ninterface IApproveAndCall {\\n    enum ApprovalType {NOT_REQUIRED, MAX, MAX_MINUS_ONE, ZERO_THEN_MAX, ZERO_THEN_MAX_MINUS_ONE}\\n\\n    /// @dev Lens to be called off-chain to determine which (if any) of the relevant approval functions should be called\\n    /// @param token The token to approve\\n    /// @param amount The amount to approve\\n    /// @return The required approval type\\n    function getApprovalType(address token, uint256 amount) external returns (ApprovalType);\\n\\n    /// @notice Approves a token for the maximum possible amount\\n    /// @param token The token to approve\\n    function approveMax(address token) external payable;\\n\\n    /// @notice Approves a token for the maximum possible amount minus one\\n    /// @param token The token to approve\\n    function approveMaxMinusOne(address token) external payable;\\n\\n    /// @notice Approves a token for zero, then the maximum possible amount\\n    /// @param token The token to approve\\n    function approveZeroThenMax(address token) external payable;\\n\\n    /// @notice Approves a token for zero, then the maximum possible amount minus one\\n    /// @param token The token to approve\\n    function approveZeroThenMaxMinusOne(address token) external payable;\\n\\n    /// @notice Calls the position manager with arbitrary calldata\\n    /// @param data Calldata to pass along to the position manager\\n    /// @return result The result from the call\\n    function callPositionManager(bytes memory data) external payable returns (bytes memory result);\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n    }\\n\\n    /// @notice Calls the position manager's mint function\\n    /// @param params Calldata to pass along to the position manager\\n    /// @return result The result from the call\\n    function mint(MintParams calldata params) external payable returns (bytes memory result);\\n\\n    struct IncreaseLiquidityParams {\\n        address token0;\\n        address token1;\\n        uint256 tokenId;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n    }\\n\\n    /// @notice Calls the position manager's increaseLiquidity function\\n    /// @param params Calldata to pass along to the position manager\\n    /// @return result The result from the call\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params) external payable returns (bytes memory result);\\n}\\n\"},\"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\"},\"@uniswap/swap-router-contracts/contracts/interfaces/IMulticallExtended.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol';\\n\\n/// @title MulticallExtended interface\\n/// @notice Enables calling multiple methods in a single call to the contract with optional validation\\ninterface IMulticallExtended is IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param deadline The time by which this function must be called before failing\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(uint256 deadline, bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param previousBlockhash The expected parent blockHash\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes32 previousBlockhash, bytes[] calldata data)\\n        external\\n        payable\\n        returns (bytes[] memory results);\\n}\\n\"},\"@uniswap/swap-router-contracts/contracts/interfaces/ISwapRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol';\\n\\nimport './IV2SwapRouter.sol';\\nimport './IV3SwapRouter.sol';\\nimport './IApproveAndCall.sol';\\nimport './IMulticallExtended.sol';\\n\\n/// @title Router token swapping functionality\\ninterface ISwapRouter02 is IV2SwapRouter, IV3SwapRouter, IApproveAndCall, IMulticallExtended, ISelfPermit {\\n\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"}}}","address":"0x20ff8FEE4da01D3d15D0782F0551BA76e6087EE2","bytecode":"0x60806040523480156200001157600080fd5b50600180546001600160a01b03191633178155600080556040805160c081018252600a60808201908152690536f6e4f6641537761760b41b60a0830152815281518083018352928352603160f81b6020848101919091528101929092526200008f919081016200008062000098565b8152306020909101526200009c565b6003556200019d565b4690565b60006040518060800160405280605281526020016200148c60529139604051602001620000ca919062000135565b60405160208183030381529060405280519060200120826000015180519060200120836020015180519060200120846040015185606001516040516020016200011895949392919062000171565b604051602081830303815290604052805190602001209050919050565b60008251815b818110156200015757602081860181015185830152016200013b565b81811115620001665782828501525b509190910192915050565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b6112df80620001ad6000396000f3fe6080604052600436106100435760003560e01c8063200d2ed21461004f5780632f8655681461007a578063522e83ad1461009c5780637ecebe00146100bc5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100646100dc565b604051610071919061112e565b60405180910390f35b34801561008657600080fd5b5061009a610095366004610cc8565b6100e2565b005b3480156100a857600080fd5b5061009a6100b7366004610d09565b610203565b3480156100c857600080fd5b506100646100d7366004610cc8565b6102a6565b60005481565b6001546001600160a01b031633146100f957600080fd5b6040516370a0823160e01b815281906000906001600160a01b038316906370a082319061012a903090600401610fc5565b60206040518083038186803b15801561014257600080fd5b505afa158015610156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017a9190610e1d565b60405163a9059cbb60e01b81529091506001600160a01b0383169063a9059cbb906101ab9033908590600401610fd9565b602060405180830381600087803b1580156101c557600080fd5b505af11580156101d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fd9190610ce9565b50505050565b61020f848484846102b8565b6102345760405162461bcd60e51b815260040161022b90611097565b60405180910390fd5b60808401516001600160a01b0316600090815260026020526040902054610120850151141561028e5761026684610361565b60808401516001600160a01b03166000908152600260205260409020805460010190556101fd565b60405162461bcd60e51b815260040161022b906110e6565b60026020526000908152604090205481565b6000806003546102c7876109fd565b6040516020016102d8929190610faa565b6040516020818303038152906040528051906020012090506000600182878787604051600081526020016040526040516103159493929190611079565b6020604051602081039080840390855afa158015610337573d6000803e3d6000fd5b5050604051601f19015160808901516001600160a01b039182169116149350505050949350505050565b805160a0820151805160009190829061037657fe5b60200260200101519050806001600160a01b03166323b872dd84608001513086602001516040518463ffffffff1660e01b81526004016103b893929190610ff2565b602060405180830381600087803b1580156103d257600080fd5b505af11580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190610ce9565b508251602084015160405163095ea7b360e01b81526001600160a01b0384169263095ea7b39261043c92600401610fd9565b602060405180830381600087803b15801561045657600080fd5b505af115801561046a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048e9190610ce9565b506104c883606001516040518060400160405280601381526020017276335f6578616374496e70757453696e676c6560681b815250610ad7565b156105f95760006040518060e001604052808560a001516000815181106104eb57fe5b60200260200101516001600160a01b031681526020018560a0015160018151811061051257fe5b60200260200101516001600160a01b0316815260200185610100015162ffffff16815260200185608001516001600160a01b0316815260200185602001518152602001856040015181526020018560e001516001600160a01b03168152509050826001600160a01b03166304e45aaf6000836040518363ffffffff1660e01b81526004016105a09190611120565b6020604051808303818588803b1580156105b957600080fd5b505af11580156105cd573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105f29190610e1d565b50506109f8565b61063383606001516040518060400160405280601481526020017376335f65786163744f757470757453696e676c6560601b815250610ad7565b1561070b5760006040518060e001604052808560a0015160008151811061065657fe5b60200260200101516001600160a01b031681526020018560a0015160018151811061067d57fe5b60200260200101516001600160a01b0316815260200185610100015162ffffff16815260200185608001516001600160a01b0316815260200185604001518152602001856020015181526020018560e001516001600160a01b03168152509050826001600160a01b0316635023b4df6000836040518363ffffffff1660e01b81526004016105a09190611120565b61073e83606001516040518060400160405280600d81526020016c1d8cd7d95e1858dd125b9c1d5d609a1b815250610ad7565b156107bd57600060405180608001604052806107638660a00151876101000151610b31565b815260200185608001516001600160a01b031681526020018560200151815260200185604001518152509050826001600160a01b031663b858183f6000836040518363ffffffff1660e01b81526004016105a0919061110d565b6107f183606001516040518060400160405280600e81526020016d1d8cd7d95e1858dd13dd5d1c1d5d60921b815250610ad7565b1561087057600060405180608001604052806108168660a00151876101000151610b31565b815260200185608001516001600160a01b031681526020018560400151815260200185602001518152509050826001600160a01b03166309b813466000836040518363ffffffff1660e01b81526004016105a0919061110d565b6108b383606001516040518060400160405280601b81526020017f76325f737761704578616374546f6b656e73466f72546f6b656e730000000000815250610ad7565b1561095457816001600160a01b031663472b43f36000856020015186604001518760a0015188608001516040518663ffffffff1660e01b81526004016108fc9493929190611137565b6020604051808303818588803b15801561091557600080fd5b505af1158015610929573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061094e9190610e1d565b506109f8565b61099783606001516040518060400160405280601b81526020017f76325f73776170546f6b656e73466f724578616374546f6b656e730000000000815250610ad7565b156109e057816001600160a01b03166342712a676000856040015186602001518760a0015188608001516040518663ffffffff1660e01b81526004016108fc9493929190611137565b60405162461bcd60e51b815260040161022b906110c2565b505050565b60006040518060e0016040528060b081526020016111fa60b09139604051602001610a289190610f8e565b6040516020818303038152906040528051906020012082600001518360200151846040015185606001518051906020012086608001518760a00151604051602001610a739190610ee6565b604051602081830303815290604052805190602001208860c001518960e001518a61010001518b6101200151604051602001610ab99b9a99989796959493929190611016565b6040516020818303038152906040528051906020012090505b919050565b600081604051602001610aea9190610f8e565b6040516020818303038152906040528051906020012083604051602001610b119190610f8e565b604051602081830303815290604052805190602001201490505b92915050565b60608060005b8451811015610bb05781858281518110610b4d57fe5b6020026020010151604051602001610b66929190610f25565b60405160208183030381529060405291506001855103811015610ba8578184604051602001610b96929190610f5c565b60405160208183030381529060405291505b600101610b37565b509392505050565b80356001600160a01b0381168114610ad257600080fd5b600082601f830112610bdf578081fd5b8135602067ffffffffffffffff821115610bf557fe5b808202610c038282016111a9565b838152828101908684018388018501891015610c1d578687fd5b8693505b85841015610c4657610c3281610bb8565b835260019390930192918401918401610c21565b50979650505050505050565b600082601f830112610c62578081fd5b813567ffffffffffffffff811115610c7657fe5b610c89601f8201601f19166020016111a9565b818152846020838601011115610c9d578283fd5b816020850160208301379081016020019190915292915050565b803560ff81168114610ad257600080fd5b600060208284031215610cd9578081fd5b610ce282610bb8565b9392505050565b600060208284031215610cfa578081fd5b81518015158114610ce2578182fd5b60008060008060808587031215610d1e578283fd5b843567ffffffffffffffff80821115610d35578485fd5b818701915061014080838a031215610d4b578586fd5b610d54816111a9565b9050610d5f83610bb8565b81526020830135602082015260408301356040820152606083013582811115610d86578687fd5b610d928a828601610c52565b606083015250610da460808401610bb8565b608082015260a083013582811115610dba578687fd5b610dc68a828601610bcf565b60a08301525060c0838101359082015260e0808401359082015261010080840135908201526101209283013592810192909252509350610e0860208601610cb7565b93969395505050506040820135916060013590565b600060208284031215610e2e578081fd5b5051919050565b60008151608084528051806080860152610e568160a08701602085016111cd565b6020848101516001600160a01b03169086015260408085015190860152606093840151938501939093525050601f01601f19160160a00190565b80516001600160a01b03908116835260208083015182169084015260408083015162ffffff16908401526060808301518216908401526080808301519084015260a0828101519084015260c09182015116910152565b815160009082906020808601845b83811015610f195781516001600160a01b031685529382019390820190600101610ef4565b50929695505050505050565b60008351610f378184602088016111cd565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b60008351610f6e8184602088016111cd565b60e89390931b6001600160e81b0319169190920190815260030192915050565b60008251610fa08184602087016111cd565b9190910192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b9a8b526001600160a01b03998a1660208c015260408b019890985260608a019690965260808901949094529190951660a087015260c086019490945260e08501939093526101008401929092526101208301919091526101408201526101600190565b93845260ff9290921660208401526040830152606082015260800190565b602080825260119082015270696e76616c6964207369676e617475726560781b604082015260600190565b6020808252600a90820152694d4554484f445f444e4560b01b604082015260600190565b6020808252600d908201526c494e56414c49445f4e4f4e434560981b604082015260600190565b600060208252610ce26020830184610e35565b60e08101610b2b8284610e90565b90815260200190565b600060808201868352602086818501526080604085015281865180845260a0860191508288019350845b818110156111865784516001600160a01b031683529383019391830191600101611161565b50506001600160a01b039590951660609490940193909352509195945050505050565b60405181810167ffffffffffffffff811182821017156111c557fe5b604052919050565b60005b838110156111e85781810151838201526020016111d0565b838111156101fd575050600091015256fe537761704f72646572286164647265737320726f757465722c75696e7432353620616d6f756e74496e2c75696e7432353620616d6f756e744f75742c737472696e67207472616465547970652c6164647265737320726563697069656e742c616464726573735b5d20706174682c75696e7420646561646c696e652c75696e74323536207371727450726963654c696d69745839362c75696e74323536206665652c75696e74323536206e6f6e636529a2646970667358221220a2c8d35fc052307c14cec893ca67c31a5b8515e868928c2dc87f4530ff94fe7b64736f6c63430007060033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","deployedBytecode":"0x6080604052600436106100435760003560e01c8063200d2ed21461004f5780632f8655681461007a578063522e83ad1461009c5780637ecebe00146100bc5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100646100dc565b604051610071919061112e565b60405180910390f35b34801561008657600080fd5b5061009a610095366004610cc8565b6100e2565b005b3480156100a857600080fd5b5061009a6100b7366004610d09565b610203565b3480156100c857600080fd5b506100646100d7366004610cc8565b6102a6565b60005481565b6001546001600160a01b031633146100f957600080fd5b6040516370a0823160e01b815281906000906001600160a01b038316906370a082319061012a903090600401610fc5565b60206040518083038186803b15801561014257600080fd5b505afa158015610156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017a9190610e1d565b60405163a9059cbb60e01b81529091506001600160a01b0383169063a9059cbb906101ab9033908590600401610fd9565b602060405180830381600087803b1580156101c557600080fd5b505af11580156101d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fd9190610ce9565b50505050565b61020f848484846102b8565b6102345760405162461bcd60e51b815260040161022b90611097565b60405180910390fd5b60808401516001600160a01b0316600090815260026020526040902054610120850151141561028e5761026684610361565b60808401516001600160a01b03166000908152600260205260409020805460010190556101fd565b60405162461bcd60e51b815260040161022b906110e6565b60026020526000908152604090205481565b6000806003546102c7876109fd565b6040516020016102d8929190610faa565b6040516020818303038152906040528051906020012090506000600182878787604051600081526020016040526040516103159493929190611079565b6020604051602081039080840390855afa158015610337573d6000803e3d6000fd5b5050604051601f19015160808901516001600160a01b039182169116149350505050949350505050565b805160a0820151805160009190829061037657fe5b60200260200101519050806001600160a01b03166323b872dd84608001513086602001516040518463ffffffff1660e01b81526004016103b893929190610ff2565b602060405180830381600087803b1580156103d257600080fd5b505af11580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190610ce9565b508251602084015160405163095ea7b360e01b81526001600160a01b0384169263095ea7b39261043c92600401610fd9565b602060405180830381600087803b15801561045657600080fd5b505af115801561046a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048e9190610ce9565b506104c883606001516040518060400160405280601381526020017276335f6578616374496e70757453696e676c6560681b815250610ad7565b156105f95760006040518060e001604052808560a001516000815181106104eb57fe5b60200260200101516001600160a01b031681526020018560a0015160018151811061051257fe5b60200260200101516001600160a01b0316815260200185610100015162ffffff16815260200185608001516001600160a01b0316815260200185602001518152602001856040015181526020018560e001516001600160a01b03168152509050826001600160a01b03166304e45aaf6000836040518363ffffffff1660e01b81526004016105a09190611120565b6020604051808303818588803b1580156105b957600080fd5b505af11580156105cd573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105f29190610e1d565b50506109f8565b61063383606001516040518060400160405280601481526020017376335f65786163744f757470757453696e676c6560601b815250610ad7565b1561070b5760006040518060e001604052808560a0015160008151811061065657fe5b60200260200101516001600160a01b031681526020018560a0015160018151811061067d57fe5b60200260200101516001600160a01b0316815260200185610100015162ffffff16815260200185608001516001600160a01b0316815260200185604001518152602001856020015181526020018560e001516001600160a01b03168152509050826001600160a01b0316635023b4df6000836040518363ffffffff1660e01b81526004016105a09190611120565b61073e83606001516040518060400160405280600d81526020016c1d8cd7d95e1858dd125b9c1d5d609a1b815250610ad7565b156107bd57600060405180608001604052806107638660a00151876101000151610b31565b815260200185608001516001600160a01b031681526020018560200151815260200185604001518152509050826001600160a01b031663b858183f6000836040518363ffffffff1660e01b81526004016105a0919061110d565b6107f183606001516040518060400160405280600e81526020016d1d8cd7d95e1858dd13dd5d1c1d5d60921b815250610ad7565b1561087057600060405180608001604052806108168660a00151876101000151610b31565b815260200185608001516001600160a01b031681526020018560400151815260200185602001518152509050826001600160a01b03166309b813466000836040518363ffffffff1660e01b81526004016105a0919061110d565b6108b383606001516040518060400160405280601b81526020017f76325f737761704578616374546f6b656e73466f72546f6b656e730000000000815250610ad7565b1561095457816001600160a01b031663472b43f36000856020015186604001518760a0015188608001516040518663ffffffff1660e01b81526004016108fc9493929190611137565b6020604051808303818588803b15801561091557600080fd5b505af1158015610929573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061094e9190610e1d565b506109f8565b61099783606001516040518060400160405280601b81526020017f76325f73776170546f6b656e73466f724578616374546f6b656e730000000000815250610ad7565b156109e057816001600160a01b03166342712a676000856040015186602001518760a0015188608001516040518663ffffffff1660e01b81526004016108fc9493929190611137565b60405162461bcd60e51b815260040161022b906110c2565b505050565b60006040518060e0016040528060b081526020016111fa60b09139604051602001610a289190610f8e565b6040516020818303038152906040528051906020012082600001518360200151846040015185606001518051906020012086608001518760a00151604051602001610a739190610ee6565b604051602081830303815290604052805190602001208860c001518960e001518a61010001518b6101200151604051602001610ab99b9a99989796959493929190611016565b6040516020818303038152906040528051906020012090505b919050565b600081604051602001610aea9190610f8e565b6040516020818303038152906040528051906020012083604051602001610b119190610f8e565b604051602081830303815290604052805190602001201490505b92915050565b60608060005b8451811015610bb05781858281518110610b4d57fe5b6020026020010151604051602001610b66929190610f25565b60405160208183030381529060405291506001855103811015610ba8578184604051602001610b96929190610f5c565b60405160208183030381529060405291505b600101610b37565b509392505050565b80356001600160a01b0381168114610ad257600080fd5b600082601f830112610bdf578081fd5b8135602067ffffffffffffffff821115610bf557fe5b808202610c038282016111a9565b838152828101908684018388018501891015610c1d578687fd5b8693505b85841015610c4657610c3281610bb8565b835260019390930192918401918401610c21565b50979650505050505050565b600082601f830112610c62578081fd5b813567ffffffffffffffff811115610c7657fe5b610c89601f8201601f19166020016111a9565b818152846020838601011115610c9d578283fd5b816020850160208301379081016020019190915292915050565b803560ff81168114610ad257600080fd5b600060208284031215610cd9578081fd5b610ce282610bb8565b9392505050565b600060208284031215610cfa578081fd5b81518015158114610ce2578182fd5b60008060008060808587031215610d1e578283fd5b843567ffffffffffffffff80821115610d35578485fd5b818701915061014080838a031215610d4b578586fd5b610d54816111a9565b9050610d5f83610bb8565b81526020830135602082015260408301356040820152606083013582811115610d86578687fd5b610d928a828601610c52565b606083015250610da460808401610bb8565b608082015260a083013582811115610dba578687fd5b610dc68a828601610bcf565b60a08301525060c0838101359082015260e0808401359082015261010080840135908201526101209283013592810192909252509350610e0860208601610cb7565b93969395505050506040820135916060013590565b600060208284031215610e2e578081fd5b5051919050565b60008151608084528051806080860152610e568160a08701602085016111cd565b6020848101516001600160a01b03169086015260408085015190860152606093840151938501939093525050601f01601f19160160a00190565b80516001600160a01b03908116835260208083015182169084015260408083015162ffffff16908401526060808301518216908401526080808301519084015260a0828101519084015260c09182015116910152565b815160009082906020808601845b83811015610f195781516001600160a01b031685529382019390820190600101610ef4565b50929695505050505050565b60008351610f378184602088016111cd565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b60008351610f6e8184602088016111cd565b60e89390931b6001600160e81b0319169190920190815260030192915050565b60008251610fa08184602087016111cd565b9190910192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b9a8b526001600160a01b03998a1660208c015260408b019890985260608a019690965260808901949094529190951660a087015260c086019490945260e08501939093526101008401929092526101208301919091526101408201526101600190565b93845260ff9290921660208401526040830152606082015260800190565b602080825260119082015270696e76616c6964207369676e617475726560781b604082015260600190565b6020808252600a90820152694d4554484f445f444e4560b01b604082015260600190565b6020808252600d908201526c494e56414c49445f4e4f4e434560981b604082015260600190565b600060208252610ce26020830184610e35565b60e08101610b2b8284610e90565b90815260200190565b600060808201868352602086818501526080604085015281865180845260a0860191508288019350845b818110156111865784516001600160a01b031683529383019391830191600101611161565b50506001600160a01b039590951660609490940193909352509195945050505050565b60405181810167ffffffffffffffff811182821017156111c557fe5b604052919050565b60005b838110156111e85781810151838201526020016111d0565b838111156101fd575050600091015256fe537761704f72646572286164647265737320726f757465722c75696e7432353620616d6f756e74496e2c75696e7432353620616d6f756e744f75742c737472696e67207472616465547970652c6164647265737320726563697069656e742c616464726573735b5d20706174682c75696e7420646561646c696e652c75696e74323536207371727450726963654c696d69745839362c75696e74323536206665652c75696e74323536206e6f6e636529a2646970667358221220a2c8d35fc052307c14cec893ca67c31a5b8515e868928c2dc87f4530ff94fe7b64736f6c63430007060033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"}],"name":"liquidate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"status","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"router","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"string","name":"tradeType","type":"string"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"sqrtPriceLimitX96","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct SwapOrder","name":"order","type":"tuple"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"verifyAndSend","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}