{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/SonOfASwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\n// TODO: import uniswap v2 periphery\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct SwapOrder {\\n    address router;\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    string tradeType; // enum? // \\\"v3_exactInputSingle\\\" | \\\"v3_exactOutputSingle\\\" | \\\"v3_exactInput\\\" | \\\"v3_exactOutput\\\" | \\\"v2_swapExactTokensForTokens\\\" | \\\"v2_swapTokensForExactTokens\\\"\\n    address recipient;\\n    address[] path;\\n    uint256 deadline;\\n    // v3\\n    uint256 sqrtPriceLimitX96; // uint160 represented as uint256 for golang compatibility // TODO: remove casting (fix golang lib)\\n    uint256 fee; // uint24 represented as uint256 for golang compatibility // TODO: remove casting (fix golang lib)\\n}\\n\\ncontract SonOfASwap {\\n    uint256 public status;\\n    address private owner;\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    string private constant EIP712_DOMAIN =\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n    string private constant SWAPORDER =\\n        \\\"SwapOrder(address router,uint256 amountIn,uint256 amountOut,string tradeType,address recipient,address[] path,uint deadline,uint256 sqrtPriceLimitX96,uint256 fee)\\\";\\n\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(abi.encodePacked(EIP712_DOMAIN));\\n    bytes32 private constant SWAPORDER_TYPEHASH =\\n        keccak256(abi.encodePacked(SWAPORDER));\\n\\n    bytes32 private DOMAIN_SEPARATOR;\\n\\n    function getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n        status = 0;\\n        DOMAIN_SEPARATOR = hash(\\n            EIP712Domain({\\n                name: \\\"SonOfASwap\\\",\\n                version: \\\"1\\\",\\n                chainId: getChainID(),\\n                verifyingContract: address(this)\\n            })\\n        );\\n    }\\n\\n    receive() external payable {}\\n\\n    function hash(EIP712Domain memory eip712Domain)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(bytes(eip712Domain.name)),\\n                    keccak256(bytes(eip712Domain.version)),\\n                    eip712Domain.chainId,\\n                    eip712Domain.verifyingContract\\n                )\\n            );\\n    }\\n\\n    function hash(SwapOrder memory order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    SWAPORDER_TYPEHASH,\\n                    order.router,\\n                    order.amountIn,\\n                    order.amountOut,\\n                    keccak256(bytes(order.tradeType)),\\n                    order.recipient,\\n                    keccak256(abi.encodePacked(order.path)),\\n                    order.deadline,\\n                    order.sqrtPriceLimitX96,\\n                    order.fee\\n                )\\n            );\\n    }\\n\\n    function verify(\\n        SwapOrder memory order,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool) {\\n        // Note: we need to use `encodePacked` here instead of `encode`.\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hash(order))\\n        );\\n        address recovered = ecrecover(digest, v, r, s);\\n        return recovered == order.recipient;\\n    }\\n\\n    function stringsEqual(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (keccak256(abi.encodePacked((a))) ==\\n            keccak256(abi.encodePacked((b))));\\n    }\\n\\n    function sendOrder(SwapOrder memory order) internal {\\n        // instantiate router interface\\n        ISwapRouter router = ISwapRouter(order.router);\\n        // instantiate input token interface\\n        IERC20 tokenIn = IERC20(order.path[0]);\\n\\n        // transfer input token from user to (this)\\n        tokenIn.transferFrom(order.recipient, address(this), order.amountIn);\\n        // approve router to spend (this) tokenIn\\n        tokenIn.approve(order.router, order.amountIn);\\n\\n        // choose router method based on order type\\n        if (stringsEqual(order.tradeType, \\\"v3_exactInputSingle\\\")) {\\n            // encode function params based on order\\n            ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n                .ExactInputSingleParams(\\n                    order.path[0], // tokenIn\\n                    order.path[1], // tokenOut\\n                    uint24(order.fee), // fee\\n                    order.recipient, // recipient\\n                    order.deadline, // deadline\\n                    order.amountIn, // amountIn\\n                    order.amountOut, // amountOutMinimum\\n                    uint160(order.sqrtPriceLimitX96) // sqrtPriceLimitX96\\n                );\\n\\n            // send order to router\\n            router.exactInputSingle{value: 0x0}(params);\\n        } else if (stringsEqual(order.tradeType, \\\"v3_exactOutputSingle\\\")) {\\n            ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter\\n                .ExactOutputSingleParams(\\n                    order.path[0], // tokenIn\\n                    order.path[1], // tokenOut\\n                    uint24(order.fee), // fee\\n                    order.recipient, // recipient\\n                    order.deadline, // deadline\\n                    order.amountOut, // amountOut\\n                    order.amountIn, // amountInMaximum\\n                    uint160(order.sqrtPriceLimitX96) // sqrtPriceLimitX96\\n                );\\n\\n            router.exactOutputSingle{value: 0x0}(params);\\n        } else if (stringsEqual(order.tradeType, \\\"v3_exactInput\\\")) {\\n            ISwapRouter.ExactInputParams memory params = ISwapRouter\\n                .ExactInputParams(\\n                    abi.encodePacked(order.path), // path\\n                    order.recipient, // recipient\\n                    order.deadline, // deadline\\n                    order.amountIn, // amountIn\\n                    order.amountOut // amountOutMinimum\\n                );\\n            router.exactInput{value: 0x0}(params);\\n        } else if (stringsEqual(order.tradeType, \\\"v3_exactOutput\\\")) {\\n            /*\\n                struct ExactOutputParams {\\n                    bytes path;\\n                    address recipient;\\n                    uint256 deadline;\\n                    uint256 amountOut;\\n                    uint256 amountInMaximum;\\n                }\\n            */\\n            ISwapRouter.ExactOutputParams memory params = ISwapRouter\\n                .ExactOutputParams(\\n                    abi.encodePacked(order.path), // path\\n                    order.recipient, // recipient\\n                    order.deadline, // deadline\\n                    order.amountOut, // amountOut\\n                    order.amountIn // amountInMaximum\\n                );\\n            router.exactOutput{value: 0x0}(params);\\n        } else {\\n            // TODO: v2; ignore for now\\n            revert(\\\"unimplemented\\\");\\n        }\\n    }\\n\\n    function verifyAndSend(\\n        SwapOrder memory order,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        require(verify(order, v, r, s), \\\"invalid signature\\\");\\n        sendOrder(order);\\n        status = status + 1;\\n    }\\n\\n    // status reset for debugging\\n    function resetStatus() public {\\n        require(msg.sender == owner);\\n        status = 0;\\n    }\\n}\\n\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"}}}","address":"0xA1062dC3aB4FF979271bf1FFAd495333550Ac6bB","bytecode":"0x60806040523480156200001157600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080819055506200011a60405180608001604052806040518060400160405280600a81526020017f536f6e4f6641537761700000000000000000000000000000000000000000000081525081526020016040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152508152602001620000ef6200012660201b60201c565b81526020013073ffffffffffffffffffffffffffffffffffffffff168152506200013360201b60201c565b60028190555062000340565b6000804690508091505090565b600060405180608001604052806052815260200162001dbb6052913960405160200162000161919062000236565b6040516020818303038152906040528051906020012082600001518051906020012083602001518051906020012084604001518560600151604051602001620001af9594939291906200024f565b604051602081830303815290604052805190602001209050919050565b620001d781620002c2565b82525050565b620001e881620002d6565b82525050565b6000620001fb82620002ac565b620002078185620002b7565b9350620002198185602086016200030a565b80840191505092915050565b620002308162000300565b82525050565b6000620002448284620001ee565b915081905092915050565b600060a082019050620002666000830188620001dd565b620002756020830187620001dd565b620002846040830186620001dd565b62000293606083018562000225565b620002a26080830184620001cc565b9695505050505050565b600081519050919050565b600081905092915050565b6000620002cf82620002e0565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200032a5780820151818401526020810190506200030d565b838111156200033a576000848401525b50505050565b611a6b80620003506000396000f3fe6080604052600436106100385760003560e01c8063200d2ed2146100445780638c3c4c621461006f578063e84486a2146100865761003f565b3661003f57005b600080fd5b34801561005057600080fd5b506100596100af565b60405161006691906115e2565b60405180910390f35b34801561007b57600080fd5b506100846100b5565b005b34801561009257600080fd5b506100ad60048036038101906100a89190610ec5565b610118565b005b60005481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461010f57600080fd5b60008081905550565b61012484848484610187565b610163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015a90611526565b60405180910390fd5b61016c84610251565b600160005461017b91906116f5565b60008190555050505050565b60008060025461019687610ae9565b6040516020016101a79291906113ae565b6040516020818303038152906040528051906020012090506000600182878787604051600081526020016040526040516101e494939291906114e1565b6020604051602081039080840390855afa158015610206573d6000803e3d6000fd5b505050602060405103519050866080015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161492505050949350505050565b60008160000151905060008260a0015160008151811061029a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff166323b872dd84608001513086602001516040518463ffffffff1660e01b81526004016102e9939291906113e5565b602060405180830381600087803b15801561030357600080fd5b505af1158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190610e9c565b508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3846000015185602001516040518363ffffffff1660e01b815260040161037f92919061141c565b602060405180830381600087803b15801561039957600080fd5b505af11580156103ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d19190610e9c565b5061041583606001516040518060400160405280601381526020017f76335f6578616374496e70757453696e676c6500000000000000000000000000815250610bbb565b156105ec5760006040518061010001604052808560a00151600081518110610466577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a001516001815181106104c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16815260200185610100015162ffffff168152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185602001518152602001856040015181526020018560e0015173ffffffffffffffffffffffffffffffffffffffff1681525090508273ffffffffffffffffffffffffffffffffffffffff1663414bf3896000836040518363ffffffff1660e01b81526004016105939190611588565b6020604051808303818588803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105e59190610f40565b5050610ae4565b61062f83606001516040518060400160405280601481526020017f76335f65786163744f757470757453696e676c65000000000000000000000000815250610bbb565b156108065760006040518061010001604052808560a00151600081518110610680577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a001516001815181106106e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16815260200185610100015162ffffff168152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185604001518152602001856020015181526020018560e0015173ffffffffffffffffffffffffffffffffffffffff1681525090508273ffffffffffffffffffffffffffffffffffffffff1663db3e21986000836040518363ffffffff1660e01b81526004016107ad91906115c6565b6020604051808303818588803b1580156107c657600080fd5b505af11580156107da573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107ff9190610f40565b5050610ae3565b61084983606001516040518060400160405280600d81526020017f76335f6578616374496e70757400000000000000000000000000000000000000815250610bbb565b156109565760006040518060a001604052808560a001516040516020016108709190611380565b6040516020818303038152906040528152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185602001518152602001856040015181525090508273ffffffffffffffffffffffffffffffffffffffff1663c04b8d596000836040518363ffffffff1660e01b81526004016108fd9190611566565b6020604051808303818588803b15801561091657600080fd5b505af115801561092a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061094f9190610f40565b5050610ae2565b61099983606001516040518060400160405280600e81526020017f76335f65786163744f7574707574000000000000000000000000000000000000815250610bbb565b15610aa65760006040518060a001604052808560a001516040516020016109c09190611380565b6040516020818303038152906040528152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185604001518152602001856020015181525090508273ffffffffffffffffffffffffffffffffffffffff1663f28c04986000836040518363ffffffff1660e01b8152600401610a4d91906115a4565b6020604051808303818588803b158015610a6657600080fd5b505af1158015610a7a573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a9f9190610f40565b5050610ae1565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad890611546565b60405180910390fd5b5b5b5b505050565b60006040518060e0016040528060a2815260200161199460a29139604051602001610b149190611397565b6040516020818303038152906040528051906020012082600001518360200151846040015185606001518051906020012086608001518760a00151604051602001610b5f9190611380565b604051602081830303815290604052805190602001208860c001518960e001518a6101000151604051602001610b9e9a99989796959493929190611445565b604051602081830303815290604052805190602001209050919050565b600081604051602001610bce9190611397565b6040516020818303038152906040528051906020012083604051602001610bf59190611397565b6040516020818303038152906040528051906020012014905092915050565b6000610c27610c2284611622565b6115fd565b90508083825260208201905082856020860282011115610c4657600080fd5b60005b85811015610c765781610c5c8882610cbe565b845260208401935060208301925050600181019050610c49565b5050509392505050565b6000610c93610c8e8461164e565b6115fd565b905082815260208101848484011115610cab57600080fd5b610cb68482856117b9565b509392505050565b600081359050610ccd81611920565b92915050565b600082601f830112610ce457600080fd5b8135610cf4848260208601610c14565b91505092915050565b600081519050610d0c81611937565b92915050565b600081359050610d218161194e565b92915050565b600082601f830112610d3857600080fd5b8135610d48848260208601610c80565b91505092915050565b60006101208284031215610d6457600080fd5b610d6f6101206115fd565b90506000610d7f84828501610cbe565b6000830152506020610d9384828501610e5d565b6020830152506040610da784828501610e5d565b604083015250606082013567ffffffffffffffff811115610dc757600080fd5b610dd384828501610d27565b6060830152506080610de784828501610cbe565b60808301525060a082013567ffffffffffffffff811115610e0757600080fd5b610e1384828501610cd3565b60a08301525060c0610e2784828501610e5d565b60c08301525060e0610e3b84828501610e5d565b60e083015250610100610e5084828501610e5d565b6101008301525092915050565b600081359050610e6c81611965565b92915050565b600081519050610e8181611965565b92915050565b600081359050610e968161197c565b92915050565b600060208284031215610eae57600080fd5b6000610ebc84828501610cfd565b91505092915050565b60008060008060808587031215610edb57600080fd5b600085013567ffffffffffffffff811115610ef557600080fd5b610f0187828801610d51565b9450506020610f1287828801610e87565b9350506040610f2387828801610d12565b9250506060610f3487828801610d12565b91505092959194509250565b600060208284031215610f5257600080fd5b6000610f6084828501610e72565b91505092915050565b6000610f758383610f9f565b60208301905092915050565b610f8a8161174b565b82525050565b610f998161174b565b82525050565b610fa88161174b565b82525050565b6000610fb98261168f565b610fc381856116bd565b9350610fce8361167f565b8060005b83811015610fff578151610fe68882610f69565b9750610ff1836116b0565b925050600181019050610fd2565b5085935050505092915050565b61101581611769565b82525050565b61102c61102782611769565b61182c565b82525050565b600061103d8261169a565b61104781856116c8565b93506110578185602086016117c8565b61106081611894565b840191505092915050565b6000611076826116a5565b61108081856116ea565b93506110908185602086016117c8565b80840191505092915050565b60006110a96011836116d9565b91506110b4826118a5565b602082019050919050565b60006110cc6002836116ea565b91506110d7826118ce565b600282019050919050565b60006110ef600d836116d9565b91506110fa826118f7565b602082019050919050565b600060a08301600083015184820360008601526111228282611032565b91505060208301516111376020860182610f81565b50604083015161114a6040860182611353565b50606083015161115d6060860182611353565b5060808301516111706080860182611353565b508091505092915050565b610100820160008201516111926000850182610f81565b5060208201516111a56020850182610f81565b5060408201516111b86040850182611344565b5060608201516111cb6060850182610f81565b5060808201516111de6080850182611353565b5060a08201516111f160a0850182611353565b5060c082015161120460c0850182611353565b5060e082015161121760e0850182611335565b50505050565b600060a083016000830151848203600086015261123a8282611032565b915050602083015161124f6020860182610f81565b5060408301516112626040860182611353565b5060608301516112756060860182611353565b5060808301516112886080860182611353565b508091505092915050565b610100820160008201516112aa6000850182610f81565b5060208201516112bd6020850182610f81565b5060408201516112d06040850182611344565b5060608201516112e36060850182610f81565b5060808201516112f66080850182611353565b5060a082015161130960a0850182611353565b5060c082015161131c60c0850182611353565b5060e082015161132f60e0850182611335565b50505050565b61133e81611773565b82525050565b61134d81611793565b82525050565b61135c816117a2565b82525050565b61136b816117a2565b82525050565b61137a816117ac565b82525050565b600061138c8284610fae565b915081905092915050565b60006113a3828461106b565b915081905092915050565b60006113b9826110bf565b91506113c5828561101b565b6020820191506113d5828461101b565b6020820191508190509392505050565b60006060820190506113fa6000830186610f90565b6114076020830185610f90565b6114146040830184611362565b949350505050565b60006040820190506114316000830185610f90565b61143e6020830184611362565b9392505050565b60006101408201905061145b600083018d61100c565b611468602083018c610f90565b611475604083018b611362565b611482606083018a611362565b61148f608083018961100c565b61149c60a0830188610f90565b6114a960c083018761100c565b6114b660e0830186611362565b6114c4610100830185611362565b6114d2610120830184611362565b9b9a5050505050505050505050565b60006080820190506114f6600083018761100c565b6115036020830186611371565b611510604083018561100c565b61151d606083018461100c565b95945050505050565b6000602082019050818103600083015261153f8161109c565b9050919050565b6000602082019050818103600083015261155f816110e2565b9050919050565b600060208201905081810360008301526115808184611105565b905092915050565b60006101008201905061159e600083018461117b565b92915050565b600060208201905081810360008301526115be818461121d565b905092915050565b6000610100820190506115dc6000830184611293565b92915050565b60006020820190506115f76000830184611362565b92915050565b6000611607611618565b905061161382826117fb565b919050565b6000604051905090565b600067ffffffffffffffff82111561163d5761163c611865565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561166957611668611865565b5b61167282611894565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611700826117a2565b915061170b836117a2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117405761173f611836565b5b828201905092915050565b600061175682611773565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156117e65780820151818401526020810190506117cb565b838111156117f5576000848401525b50505050565b61180482611894565b810181811067ffffffffffffffff8211171561182357611822611865565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f756e696d706c656d656e74656400000000000000000000000000000000000000600082015250565b6119298161174b565b811461193457600080fd5b50565b6119408161175d565b811461194b57600080fd5b50565b61195781611769565b811461196257600080fd5b50565b61196e816117a2565b811461197957600080fd5b50565b611985816117ac565b811461199057600080fd5b5056fe537761704f72646572286164647265737320726f757465722c75696e7432353620616d6f756e74496e2c75696e7432353620616d6f756e744f75742c737472696e67207472616465547970652c6164647265737320726563697069656e742c616464726573735b5d20706174682c75696e7420646561646c696e652c75696e74323536207371727450726963654c696d69745839362c75696e743235362066656529a2646970667358221220e0d3e9488417c0501a272756992a4fb6dce9af455d68489c3151fc40faf42f3c64736f6c63430008040033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","deployedBytecode":"0x6080604052600436106100385760003560e01c8063200d2ed2146100445780638c3c4c621461006f578063e84486a2146100865761003f565b3661003f57005b600080fd5b34801561005057600080fd5b506100596100af565b60405161006691906115e2565b60405180910390f35b34801561007b57600080fd5b506100846100b5565b005b34801561009257600080fd5b506100ad60048036038101906100a89190610ec5565b610118565b005b60005481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461010f57600080fd5b60008081905550565b61012484848484610187565b610163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015a90611526565b60405180910390fd5b61016c84610251565b600160005461017b91906116f5565b60008190555050505050565b60008060025461019687610ae9565b6040516020016101a79291906113ae565b6040516020818303038152906040528051906020012090506000600182878787604051600081526020016040526040516101e494939291906114e1565b6020604051602081039080840390855afa158015610206573d6000803e3d6000fd5b505050602060405103519050866080015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161492505050949350505050565b60008160000151905060008260a0015160008151811061029a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff166323b872dd84608001513086602001516040518463ffffffff1660e01b81526004016102e9939291906113e5565b602060405180830381600087803b15801561030357600080fd5b505af1158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190610e9c565b508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3846000015185602001516040518363ffffffff1660e01b815260040161037f92919061141c565b602060405180830381600087803b15801561039957600080fd5b505af11580156103ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d19190610e9c565b5061041583606001516040518060400160405280601381526020017f76335f6578616374496e70757453696e676c6500000000000000000000000000815250610bbb565b156105ec5760006040518061010001604052808560a00151600081518110610466577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a001516001815181106104c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16815260200185610100015162ffffff168152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185602001518152602001856040015181526020018560e0015173ffffffffffffffffffffffffffffffffffffffff1681525090508273ffffffffffffffffffffffffffffffffffffffff1663414bf3896000836040518363ffffffff1660e01b81526004016105939190611588565b6020604051808303818588803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105e59190610f40565b5050610ae4565b61062f83606001516040518060400160405280601481526020017f76335f65786163744f757470757453696e676c65000000000000000000000000815250610bbb565b156108065760006040518061010001604052808560a00151600081518110610680577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a001516001815181106106e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16815260200185610100015162ffffff168152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185604001518152602001856020015181526020018560e0015173ffffffffffffffffffffffffffffffffffffffff1681525090508273ffffffffffffffffffffffffffffffffffffffff1663db3e21986000836040518363ffffffff1660e01b81526004016107ad91906115c6565b6020604051808303818588803b1580156107c657600080fd5b505af11580156107da573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107ff9190610f40565b5050610ae3565b61084983606001516040518060400160405280600d81526020017f76335f6578616374496e70757400000000000000000000000000000000000000815250610bbb565b156109565760006040518060a001604052808560a001516040516020016108709190611380565b6040516020818303038152906040528152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185602001518152602001856040015181525090508273ffffffffffffffffffffffffffffffffffffffff1663c04b8d596000836040518363ffffffff1660e01b81526004016108fd9190611566565b6020604051808303818588803b15801561091657600080fd5b505af115801561092a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061094f9190610f40565b5050610ae2565b61099983606001516040518060400160405280600e81526020017f76335f65786163744f7574707574000000000000000000000000000000000000815250610bbb565b15610aa65760006040518060a001604052808560a001516040516020016109c09190611380565b6040516020818303038152906040528152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185604001518152602001856020015181525090508273ffffffffffffffffffffffffffffffffffffffff1663f28c04986000836040518363ffffffff1660e01b8152600401610a4d91906115a4565b6020604051808303818588803b158015610a6657600080fd5b505af1158015610a7a573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a9f9190610f40565b5050610ae1565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad890611546565b60405180910390fd5b5b5b5b505050565b60006040518060e0016040528060a2815260200161199460a29139604051602001610b149190611397565b6040516020818303038152906040528051906020012082600001518360200151846040015185606001518051906020012086608001518760a00151604051602001610b5f9190611380565b604051602081830303815290604052805190602001208860c001518960e001518a6101000151604051602001610b9e9a99989796959493929190611445565b604051602081830303815290604052805190602001209050919050565b600081604051602001610bce9190611397565b6040516020818303038152906040528051906020012083604051602001610bf59190611397565b6040516020818303038152906040528051906020012014905092915050565b6000610c27610c2284611622565b6115fd565b90508083825260208201905082856020860282011115610c4657600080fd5b60005b85811015610c765781610c5c8882610cbe565b845260208401935060208301925050600181019050610c49565b5050509392505050565b6000610c93610c8e8461164e565b6115fd565b905082815260208101848484011115610cab57600080fd5b610cb68482856117b9565b509392505050565b600081359050610ccd81611920565b92915050565b600082601f830112610ce457600080fd5b8135610cf4848260208601610c14565b91505092915050565b600081519050610d0c81611937565b92915050565b600081359050610d218161194e565b92915050565b600082601f830112610d3857600080fd5b8135610d48848260208601610c80565b91505092915050565b60006101208284031215610d6457600080fd5b610d6f6101206115fd565b90506000610d7f84828501610cbe565b6000830152506020610d9384828501610e5d565b6020830152506040610da784828501610e5d565b604083015250606082013567ffffffffffffffff811115610dc757600080fd5b610dd384828501610d27565b6060830152506080610de784828501610cbe565b60808301525060a082013567ffffffffffffffff811115610e0757600080fd5b610e1384828501610cd3565b60a08301525060c0610e2784828501610e5d565b60c08301525060e0610e3b84828501610e5d565b60e083015250610100610e5084828501610e5d565b6101008301525092915050565b600081359050610e6c81611965565b92915050565b600081519050610e8181611965565b92915050565b600081359050610e968161197c565b92915050565b600060208284031215610eae57600080fd5b6000610ebc84828501610cfd565b91505092915050565b60008060008060808587031215610edb57600080fd5b600085013567ffffffffffffffff811115610ef557600080fd5b610f0187828801610d51565b9450506020610f1287828801610e87565b9350506040610f2387828801610d12565b9250506060610f3487828801610d12565b91505092959194509250565b600060208284031215610f5257600080fd5b6000610f6084828501610e72565b91505092915050565b6000610f758383610f9f565b60208301905092915050565b610f8a8161174b565b82525050565b610f998161174b565b82525050565b610fa88161174b565b82525050565b6000610fb98261168f565b610fc381856116bd565b9350610fce8361167f565b8060005b83811015610fff578151610fe68882610f69565b9750610ff1836116b0565b925050600181019050610fd2565b5085935050505092915050565b61101581611769565b82525050565b61102c61102782611769565b61182c565b82525050565b600061103d8261169a565b61104781856116c8565b93506110578185602086016117c8565b61106081611894565b840191505092915050565b6000611076826116a5565b61108081856116ea565b93506110908185602086016117c8565b80840191505092915050565b60006110a96011836116d9565b91506110b4826118a5565b602082019050919050565b60006110cc6002836116ea565b91506110d7826118ce565b600282019050919050565b60006110ef600d836116d9565b91506110fa826118f7565b602082019050919050565b600060a08301600083015184820360008601526111228282611032565b91505060208301516111376020860182610f81565b50604083015161114a6040860182611353565b50606083015161115d6060860182611353565b5060808301516111706080860182611353565b508091505092915050565b610100820160008201516111926000850182610f81565b5060208201516111a56020850182610f81565b5060408201516111b86040850182611344565b5060608201516111cb6060850182610f81565b5060808201516111de6080850182611353565b5060a08201516111f160a0850182611353565b5060c082015161120460c0850182611353565b5060e082015161121760e0850182611335565b50505050565b600060a083016000830151848203600086015261123a8282611032565b915050602083015161124f6020860182610f81565b5060408301516112626040860182611353565b5060608301516112756060860182611353565b5060808301516112886080860182611353565b508091505092915050565b610100820160008201516112aa6000850182610f81565b5060208201516112bd6020850182610f81565b5060408201516112d06040850182611344565b5060608201516112e36060850182610f81565b5060808201516112f66080850182611353565b5060a082015161130960a0850182611353565b5060c082015161131c60c0850182611353565b5060e082015161132f60e0850182611335565b50505050565b61133e81611773565b82525050565b61134d81611793565b82525050565b61135c816117a2565b82525050565b61136b816117a2565b82525050565b61137a816117ac565b82525050565b600061138c8284610fae565b915081905092915050565b60006113a3828461106b565b915081905092915050565b60006113b9826110bf565b91506113c5828561101b565b6020820191506113d5828461101b565b6020820191508190509392505050565b60006060820190506113fa6000830186610f90565b6114076020830185610f90565b6114146040830184611362565b949350505050565b60006040820190506114316000830185610f90565b61143e6020830184611362565b9392505050565b60006101408201905061145b600083018d61100c565b611468602083018c610f90565b611475604083018b611362565b611482606083018a611362565b61148f608083018961100c565b61149c60a0830188610f90565b6114a960c083018761100c565b6114b660e0830186611362565b6114c4610100830185611362565b6114d2610120830184611362565b9b9a5050505050505050505050565b60006080820190506114f6600083018761100c565b6115036020830186611371565b611510604083018561100c565b61151d606083018461100c565b95945050505050565b6000602082019050818103600083015261153f8161109c565b9050919050565b6000602082019050818103600083015261155f816110e2565b9050919050565b600060208201905081810360008301526115808184611105565b905092915050565b60006101008201905061159e600083018461117b565b92915050565b600060208201905081810360008301526115be818461121d565b905092915050565b6000610100820190506115dc6000830184611293565b92915050565b60006020820190506115f76000830184611362565b92915050565b6000611607611618565b905061161382826117fb565b919050565b6000604051905090565b600067ffffffffffffffff82111561163d5761163c611865565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561166957611668611865565b5b61167282611894565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611700826117a2565b915061170b836117a2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117405761173f611836565b5b828201905092915050565b600061175682611773565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156117e65780820151818401526020810190506117cb565b838111156117f5576000848401525b50505050565b61180482611894565b810181811067ffffffffffffffff8211171561182357611822611865565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f756e696d706c656d656e74656400000000000000000000000000000000000000600082015250565b6119298161174b565b811461193457600080fd5b50565b6119408161175d565b811461194b57600080fd5b50565b61195781611769565b811461196257600080fd5b50565b61196e816117a2565b811461197957600080fd5b50565b611985816117ac565b811461199057600080fd5b5056fe537761704f72646572286164647265737320726f757465722c75696e7432353620616d6f756e74496e2c75696e7432353620616d6f756e744f75742c737472696e67207472616465547970652c6164647265737320726563697069656e742c616464726573735b5d20706174682c75696e7420646561646c696e652c75696e74323536207371727450726963654c696d69745839362c75696e743235362066656529a2646970667358221220e0d3e9488417c0501a272756992a4fb6dce9af455d68489c3151fc40faf42f3c64736f6c63430008040033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"resetStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"status","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"router","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"string","name":"tradeType","type":"string"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"sqrtPriceLimitX96","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"}],"internalType":"struct SwapOrder","name":"order","type":"tuple"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"verifyAndSend","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}