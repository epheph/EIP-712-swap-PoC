{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/SonOfASwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\n// TODO: import uniswap v2 periphery\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct SwapOrder {\\n    address router;\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    string tradeType; // enum? // \\\"v3_exactInputSingle\\\" | \\\"v3_exactOutputSingle\\\" | \\\"v3_exactInput\\\" | \\\"v3_exactOutput\\\" | \\\"v2_swapExactTokensForTokens\\\" | \\\"v2_swapTokensForExactTokens\\\"\\n    address recipient;\\n    address[] path;\\n    uint256 deadline;\\n    // v3\\n    uint256 sqrtPriceLimitX96; // uint160 represented as uint256 for golang compatibility // TODO: remove casting (fix golang lib)\\n    uint256 fee; // uint24 represented as uint256 for golang compatibility // TODO: remove casting (fix golang lib)\\n}\\n\\ncontract SonOfASwap {\\n    uint256 public status;\\n    address private owner;\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    string private constant EIP712_DOMAIN =\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n    string private constant SWAPORDER =\\n        \\\"SwapOrder(address router,uint256 amountIn,uint256 amountOut,string tradeType,address recipient,address[] path,uint deadline,uint256 sqrtPriceLimitX96,uint256 fee)\\\";\\n\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(abi.encodePacked(EIP712_DOMAIN));\\n    bytes32 private constant SWAPORDER_TYPEHASH =\\n        keccak256(abi.encodePacked(SWAPORDER));\\n\\n    bytes32 private DOMAIN_SEPARATOR;\\n\\n    function getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n        status = 0;\\n        DOMAIN_SEPARATOR = hash(\\n            EIP712Domain({\\n                name: \\\"SonOfASwap\\\",\\n                version: \\\"1\\\",\\n                chainId: getChainID(),\\n                verifyingContract: address(this)\\n            })\\n        );\\n    }\\n\\n    receive() external payable {}\\n\\n    function hash(EIP712Domain memory eip712Domain)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(bytes(eip712Domain.name)),\\n                    keccak256(bytes(eip712Domain.version)),\\n                    eip712Domain.chainId,\\n                    eip712Domain.verifyingContract\\n                )\\n            );\\n    }\\n\\n    function hash(SwapOrder memory order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    SWAPORDER_TYPEHASH,\\n                    order.router,\\n                    order.amountIn,\\n                    order.amountOut,\\n                    keccak256(bytes(order.tradeType)),\\n                    order.recipient,\\n                    keccak256(abi.encodePacked(order.path)),\\n                    order.deadline,\\n                    order.sqrtPriceLimitX96,\\n                    order.fee\\n                )\\n            );\\n    }\\n\\n    function verify(\\n        SwapOrder memory order,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool) {\\n        // Note: we need to use `encodePacked` here instead of `encode`.\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hash(order))\\n        );\\n        address recovered = ecrecover(digest, v, r, s);\\n        return recovered == order.recipient;\\n    }\\n\\n    function stringsEqual(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (keccak256(abi.encodePacked((a))) ==\\n            keccak256(abi.encodePacked((b))));\\n    }\\n\\n    function sendOrder(SwapOrder memory order) internal {\\n        // instantiate router interface\\n        ISwapRouter router = ISwapRouter(order.router);\\n        // instantiate input token interface\\n        IERC20 tokenIn = IERC20(order.path[0]);\\n\\n        // transfer input token from user to (this)\\n        tokenIn.transferFrom(order.recipient, address(this), order.amountIn);\\n        // TODO: deal with refunds due to slippage (and later, realized MEV)\\n\\n        // approve router to spend (this) tokenIn\\n        tokenIn.approve(order.router, order.amountIn);\\n\\n        // choose router method based on order type\\n        if (stringsEqual(order.tradeType, \\\"v3_exactInputSingle\\\")) {\\n            // encode function params based on order\\n            ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n                .ExactInputSingleParams(\\n                    order.path[0], // tokenIn\\n                    order.path[1], // tokenOut\\n                    uint24(order.fee), // fee\\n                    order.recipient, // recipient\\n                    order.deadline, // deadline\\n                    order.amountIn, // amountIn\\n                    order.amountOut, // amountOutMinimum\\n                    uint160(order.sqrtPriceLimitX96) // sqrtPriceLimitX96\\n                );\\n\\n            // send order to router\\n            router.exactInputSingle{value: 0x0}(params);\\n        } else if (stringsEqual(order.tradeType, \\\"v3_exactOutputSingle\\\")) {\\n            ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter\\n                .ExactOutputSingleParams(\\n                    order.path[0], // tokenIn\\n                    order.path[1], // tokenOut\\n                    uint24(order.fee), // fee\\n                    order.recipient, // recipient\\n                    order.deadline, // deadline\\n                    order.amountOut, // amountOut\\n                    order.amountIn, // amountInMaximum\\n                    uint160(order.sqrtPriceLimitX96) // sqrtPriceLimitX96\\n                );\\n\\n            router.exactOutputSingle{value: 0x0}(params);\\n        } else if (stringsEqual(order.tradeType, \\\"v3_exactInput\\\")) {\\n            ISwapRouter.ExactInputParams memory params = ISwapRouter\\n                .ExactInputParams(\\n                    abi.encodePacked(order.path), // path\\n                    order.recipient, // recipient\\n                    order.deadline, // deadline\\n                    order.amountIn, // amountIn\\n                    order.amountOut // amountOutMinimum\\n                );\\n            router.exactInput{value: 0x0}(params);\\n        } else if (stringsEqual(order.tradeType, \\\"v3_exactOutput\\\")) {\\n            /*\\n                struct ExactOutputParams {\\n                    bytes path;\\n                    address recipient;\\n                    uint256 deadline;\\n                    uint256 amountOut;\\n                    uint256 amountInMaximum;\\n                }\\n            */\\n            ISwapRouter.ExactOutputParams memory params = ISwapRouter\\n                .ExactOutputParams(\\n                    abi.encodePacked(order.path), // path\\n                    order.recipient, // recipient\\n                    order.deadline, // deadline\\n                    order.amountOut, // amountOut\\n                    order.amountIn // amountInMaximum\\n                );\\n            router.exactOutput{value: 0x0}(params);\\n        } else {\\n            // TODO: v2; ignore for now\\n            revert(\\\"unimplemented\\\");\\n        }\\n    }\\n\\n    function verifyAndSend(\\n        SwapOrder memory order,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        require(verify(order, v, r, s), \\\"invalid signature\\\");\\n        sendOrder(order);\\n        status = status + 1;\\n    }\\n\\n    // status reset for debugging\\n    function resetStatus() public {\\n        require(msg.sender == owner);\\n        status = 0;\\n    }\\n\\n    // liquidate assets from this contract (for testing purposes only)\\n    function liquidate(address tokenAddress) public {\\n        require(msg.sender == owner);\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 balance = token.balanceOf(address(this));\\n        token.transfer(msg.sender, balance);\\n    }\\n}\\n\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"}}}","address":"0xd082A6B86d982FC7eAC890CAf44Fc4B999a56805","bytecode":"0x60806040523480156200001157600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080819055506200011a60405180608001604052806040518060400160405280600a81526020017f536f6e4f6641537761700000000000000000000000000000000000000000000081525081526020016040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152508152602001620000ef6200012660201b60201c565b81526020013073ffffffffffffffffffffffffffffffffffffffff168152506200013360201b60201c565b60028190555062000340565b6000804690508091505090565b600060405180608001604052806052815260200162001fb26052913960405160200162000161919062000236565b6040516020818303038152906040528051906020012082600001518051906020012083602001518051906020012084604001518560600151604051602001620001af9594939291906200024f565b604051602081830303815290604052805190602001209050919050565b620001d781620002c2565b82525050565b620001e881620002d6565b82525050565b6000620001fb82620002ac565b620002078185620002b7565b9350620002198185602086016200030a565b80840191505092915050565b620002308162000300565b82525050565b6000620002448284620001ee565b915081905092915050565b600060a082019050620002666000830188620001dd565b620002756020830187620001dd565b620002846040830186620001dd565b62000293606083018562000225565b620002a26080830184620001cc565b9695505050505050565b600081519050919050565b600081905092915050565b6000620002cf82620002e0565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200032a5780820151818401526020810190506200030d565b838111156200033a576000848401525b50505050565b611c6280620003506000396000f3fe6080604052600436106100435760003560e01c8063200d2ed21461004f5780632f8655681461007a5780638c3c4c62146100a3578063e84486a2146100ba5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100646100e3565b60405161007191906117d9565b60405180910390f35b34801561008657600080fd5b506100a1600480360381019061009c919061104f565b6100e9565b005b3480156100af57600080fd5b506100b8610268565b005b3480156100c657600080fd5b506100e160048036038101906100dc91906110a1565b6102cb565b005b60005481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014357600080fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161018391906115c1565b60206040518083038186803b15801561019b57600080fd5b505afa1580156101af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d3919061111c565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610210929190611613565b602060405180830381600087803b15801561022a57600080fd5b505af115801561023e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102629190611078565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c257600080fd5b60008081905550565b6102d78484848461033a565b610316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030d9061171d565b60405180910390fd5b61031f84610404565b600160005461032e91906118ec565b60008190555050505050565b60008060025461034987610c9c565b60405160200161035a92919061158a565b60405160208183030381529060405280519060200120905060006001828787876040516000815260200160405260405161039794939291906116d8565b6020604051602081039080840390855afa1580156103b9573d6000803e3d6000fd5b505050602060405103519050866080015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161492505050949350505050565b60008160000151905060008260a0015160008151811061044d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff166323b872dd84608001513086602001516040518463ffffffff1660e01b815260040161049c939291906115dc565b602060405180830381600087803b1580156104b657600080fd5b505af11580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190611078565b508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3846000015185602001516040518363ffffffff1660e01b8152600401610532929190611613565b602060405180830381600087803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105849190611078565b506105c883606001516040518060400160405280601381526020017f76335f6578616374496e70757453696e676c6500000000000000000000000000815250610d6e565b1561079f5760006040518061010001604052808560a00151600081518110610619577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a0015160018151811061067a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16815260200185610100015162ffffff168152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185602001518152602001856040015181526020018560e0015173ffffffffffffffffffffffffffffffffffffffff1681525090508273ffffffffffffffffffffffffffffffffffffffff1663414bf3896000836040518363ffffffff1660e01b8152600401610746919061177f565b6020604051808303818588803b15801561075f57600080fd5b505af1158015610773573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610798919061111c565b5050610c97565b6107e283606001516040518060400160405280601481526020017f76335f65786163744f757470757453696e676c65000000000000000000000000815250610d6e565b156109b95760006040518061010001604052808560a00151600081518110610833577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a00151600181518110610894577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16815260200185610100015162ffffff168152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185604001518152602001856020015181526020018560e0015173ffffffffffffffffffffffffffffffffffffffff1681525090508273ffffffffffffffffffffffffffffffffffffffff1663db3e21986000836040518363ffffffff1660e01b815260040161096091906117bd565b6020604051808303818588803b15801561097957600080fd5b505af115801561098d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109b2919061111c565b5050610c96565b6109fc83606001516040518060400160405280600d81526020017f76335f6578616374496e70757400000000000000000000000000000000000000815250610d6e565b15610b095760006040518060a001604052808560a00151604051602001610a23919061155c565b6040516020818303038152906040528152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185602001518152602001856040015181525090508273ffffffffffffffffffffffffffffffffffffffff1663c04b8d596000836040518363ffffffff1660e01b8152600401610ab0919061175d565b6020604051808303818588803b158015610ac957600080fd5b505af1158015610add573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b02919061111c565b5050610c95565b610b4c83606001516040518060400160405280600e81526020017f76335f65786163744f7574707574000000000000000000000000000000000000815250610d6e565b15610c595760006040518060a001604052808560a00151604051602001610b73919061155c565b6040516020818303038152906040528152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185604001518152602001856020015181525090508273ffffffffffffffffffffffffffffffffffffffff1663f28c04986000836040518363ffffffff1660e01b8152600401610c00919061179b565b6020604051808303818588803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610c52919061111c565b5050610c94565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8b9061173d565b60405180910390fd5b5b5b5b505050565b60006040518060e0016040528060a28152602001611b8b60a29139604051602001610cc79190611573565b6040516020818303038152906040528051906020012082600001518360200151846040015185606001518051906020012086608001518760a00151604051602001610d12919061155c565b604051602081830303815290604052805190602001208860c001518960e001518a6101000151604051602001610d519a9998979695949392919061163c565b604051602081830303815290604052805190602001209050919050565b600081604051602001610d819190611573565b6040516020818303038152906040528051906020012083604051602001610da89190611573565b6040516020818303038152906040528051906020012014905092915050565b6000610dda610dd584611819565b6117f4565b90508083825260208201905082856020860282011115610df957600080fd5b60005b85811015610e295781610e0f8882610e71565b845260208401935060208301925050600181019050610dfc565b5050509392505050565b6000610e46610e4184611845565b6117f4565b905082815260208101848484011115610e5e57600080fd5b610e698482856119b0565b509392505050565b600081359050610e8081611b17565b92915050565b600082601f830112610e9757600080fd5b8135610ea7848260208601610dc7565b91505092915050565b600081519050610ebf81611b2e565b92915050565b600081359050610ed481611b45565b92915050565b600082601f830112610eeb57600080fd5b8135610efb848260208601610e33565b91505092915050565b60006101208284031215610f1757600080fd5b610f226101206117f4565b90506000610f3284828501610e71565b6000830152506020610f4684828501611010565b6020830152506040610f5a84828501611010565b604083015250606082013567ffffffffffffffff811115610f7a57600080fd5b610f8684828501610eda565b6060830152506080610f9a84828501610e71565b60808301525060a082013567ffffffffffffffff811115610fba57600080fd5b610fc684828501610e86565b60a08301525060c0610fda84828501611010565b60c08301525060e0610fee84828501611010565b60e08301525061010061100384828501611010565b6101008301525092915050565b60008135905061101f81611b5c565b92915050565b60008151905061103481611b5c565b92915050565b60008135905061104981611b73565b92915050565b60006020828403121561106157600080fd5b600061106f84828501610e71565b91505092915050565b60006020828403121561108a57600080fd5b600061109884828501610eb0565b91505092915050565b600080600080608085870312156110b757600080fd5b600085013567ffffffffffffffff8111156110d157600080fd5b6110dd87828801610f04565b94505060206110ee8782880161103a565b93505060406110ff87828801610ec5565b925050606061111087828801610ec5565b91505092959194509250565b60006020828403121561112e57600080fd5b600061113c84828501611025565b91505092915050565b6000611151838361117b565b60208301905092915050565b61116681611942565b82525050565b61117581611942565b82525050565b61118481611942565b82525050565b600061119582611886565b61119f81856118b4565b93506111aa83611876565b8060005b838110156111db5781516111c28882611145565b97506111cd836118a7565b9250506001810190506111ae565b5085935050505092915050565b6111f181611960565b82525050565b61120861120382611960565b611a23565b82525050565b600061121982611891565b61122381856118bf565b93506112338185602086016119bf565b61123c81611a8b565b840191505092915050565b60006112528261189c565b61125c81856118e1565b935061126c8185602086016119bf565b80840191505092915050565b60006112856011836118d0565b915061129082611a9c565b602082019050919050565b60006112a86002836118e1565b91506112b382611ac5565b600282019050919050565b60006112cb600d836118d0565b91506112d682611aee565b602082019050919050565b600060a08301600083015184820360008601526112fe828261120e565b9150506020830151611313602086018261115d565b506040830151611326604086018261152f565b506060830151611339606086018261152f565b50608083015161134c608086018261152f565b508091505092915050565b6101008201600082015161136e600085018261115d565b506020820151611381602085018261115d565b5060408201516113946040850182611520565b5060608201516113a7606085018261115d565b5060808201516113ba608085018261152f565b5060a08201516113cd60a085018261152f565b5060c08201516113e060c085018261152f565b5060e08201516113f360e0850182611511565b50505050565b600060a0830160008301518482036000860152611416828261120e565b915050602083015161142b602086018261115d565b50604083015161143e604086018261152f565b506060830151611451606086018261152f565b506080830151611464608086018261152f565b508091505092915050565b61010082016000820151611486600085018261115d565b506020820151611499602085018261115d565b5060408201516114ac6040850182611520565b5060608201516114bf606085018261115d565b5060808201516114d2608085018261152f565b5060a08201516114e560a085018261152f565b5060c08201516114f860c085018261152f565b5060e082015161150b60e0850182611511565b50505050565b61151a8161196a565b82525050565b6115298161198a565b82525050565b61153881611999565b82525050565b61154781611999565b82525050565b611556816119a3565b82525050565b6000611568828461118a565b915081905092915050565b600061157f8284611247565b915081905092915050565b60006115958261129b565b91506115a182856111f7565b6020820191506115b182846111f7565b6020820191508190509392505050565b60006020820190506115d6600083018461116c565b92915050565b60006060820190506115f1600083018661116c565b6115fe602083018561116c565b61160b604083018461153e565b949350505050565b6000604082019050611628600083018561116c565b611635602083018461153e565b9392505050565b600061014082019050611652600083018d6111e8565b61165f602083018c61116c565b61166c604083018b61153e565b611679606083018a61153e565b61168660808301896111e8565b61169360a083018861116c565b6116a060c08301876111e8565b6116ad60e083018661153e565b6116bb61010083018561153e565b6116c961012083018461153e565b9b9a5050505050505050505050565b60006080820190506116ed60008301876111e8565b6116fa602083018661154d565b61170760408301856111e8565b61171460608301846111e8565b95945050505050565b6000602082019050818103600083015261173681611278565b9050919050565b60006020820190508181036000830152611756816112be565b9050919050565b6000602082019050818103600083015261177781846112e1565b905092915050565b6000610100820190506117956000830184611357565b92915050565b600060208201905081810360008301526117b581846113f9565b905092915050565b6000610100820190506117d3600083018461146f565b92915050565b60006020820190506117ee600083018461153e565b92915050565b60006117fe61180f565b905061180a82826119f2565b919050565b6000604051905090565b600067ffffffffffffffff82111561183457611833611a5c565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156118605761185f611a5c565b5b61186982611a8b565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006118f782611999565b915061190283611999565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561193757611936611a2d565b5b828201905092915050565b600061194d8261196a565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156119dd5780820151818401526020810190506119c2565b838111156119ec576000848401525b50505050565b6119fb82611a8b565b810181811067ffffffffffffffff82111715611a1a57611a19611a5c565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f756e696d706c656d656e74656400000000000000000000000000000000000000600082015250565b611b2081611942565b8114611b2b57600080fd5b50565b611b3781611954565b8114611b4257600080fd5b50565b611b4e81611960565b8114611b5957600080fd5b50565b611b6581611999565b8114611b7057600080fd5b50565b611b7c816119a3565b8114611b8757600080fd5b5056fe537761704f72646572286164647265737320726f757465722c75696e7432353620616d6f756e74496e2c75696e7432353620616d6f756e744f75742c737472696e67207472616465547970652c6164647265737320726563697069656e742c616464726573735b5d20706174682c75696e7420646561646c696e652c75696e74323536207371727450726963654c696d69745839362c75696e743235362066656529a2646970667358221220513414f840b784a2736c50757cc791ebc6bb2e5d75aa0ebcae40c8019d7e7e4464736f6c63430008040033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","deployedBytecode":"0x6080604052600436106100435760003560e01c8063200d2ed21461004f5780632f8655681461007a5780638c3c4c62146100a3578063e84486a2146100ba5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100646100e3565b60405161007191906117d9565b60405180910390f35b34801561008657600080fd5b506100a1600480360381019061009c919061104f565b6100e9565b005b3480156100af57600080fd5b506100b8610268565b005b3480156100c657600080fd5b506100e160048036038101906100dc91906110a1565b6102cb565b005b60005481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014357600080fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161018391906115c1565b60206040518083038186803b15801561019b57600080fd5b505afa1580156101af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d3919061111c565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610210929190611613565b602060405180830381600087803b15801561022a57600080fd5b505af115801561023e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102629190611078565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c257600080fd5b60008081905550565b6102d78484848461033a565b610316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030d9061171d565b60405180910390fd5b61031f84610404565b600160005461032e91906118ec565b60008190555050505050565b60008060025461034987610c9c565b60405160200161035a92919061158a565b60405160208183030381529060405280519060200120905060006001828787876040516000815260200160405260405161039794939291906116d8565b6020604051602081039080840390855afa1580156103b9573d6000803e3d6000fd5b505050602060405103519050866080015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161492505050949350505050565b60008160000151905060008260a0015160008151811061044d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff166323b872dd84608001513086602001516040518463ffffffff1660e01b815260040161049c939291906115dc565b602060405180830381600087803b1580156104b657600080fd5b505af11580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190611078565b508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3846000015185602001516040518363ffffffff1660e01b8152600401610532929190611613565b602060405180830381600087803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105849190611078565b506105c883606001516040518060400160405280601381526020017f76335f6578616374496e70757453696e676c6500000000000000000000000000815250610d6e565b1561079f5760006040518061010001604052808560a00151600081518110610619577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a0015160018151811061067a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16815260200185610100015162ffffff168152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185602001518152602001856040015181526020018560e0015173ffffffffffffffffffffffffffffffffffffffff1681525090508273ffffffffffffffffffffffffffffffffffffffff1663414bf3896000836040518363ffffffff1660e01b8152600401610746919061177f565b6020604051808303818588803b15801561075f57600080fd5b505af1158015610773573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610798919061111c565b5050610c97565b6107e283606001516040518060400160405280601481526020017f76335f65786163744f757470757453696e676c65000000000000000000000000815250610d6e565b156109b95760006040518061010001604052808560a00151600081518110610833577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a00151600181518110610894577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16815260200185610100015162ffffff168152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185604001518152602001856020015181526020018560e0015173ffffffffffffffffffffffffffffffffffffffff1681525090508273ffffffffffffffffffffffffffffffffffffffff1663db3e21986000836040518363ffffffff1660e01b815260040161096091906117bd565b6020604051808303818588803b15801561097957600080fd5b505af115801561098d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109b2919061111c565b5050610c96565b6109fc83606001516040518060400160405280600d81526020017f76335f6578616374496e70757400000000000000000000000000000000000000815250610d6e565b15610b095760006040518060a001604052808560a00151604051602001610a23919061155c565b6040516020818303038152906040528152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185602001518152602001856040015181525090508273ffffffffffffffffffffffffffffffffffffffff1663c04b8d596000836040518363ffffffff1660e01b8152600401610ab0919061175d565b6020604051808303818588803b158015610ac957600080fd5b505af1158015610add573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b02919061111c565b5050610c95565b610b4c83606001516040518060400160405280600e81526020017f76335f65786163744f7574707574000000000000000000000000000000000000815250610d6e565b15610c595760006040518060a001604052808560a00151604051602001610b73919061155c565b6040516020818303038152906040528152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185604001518152602001856020015181525090508273ffffffffffffffffffffffffffffffffffffffff1663f28c04986000836040518363ffffffff1660e01b8152600401610c00919061179b565b6020604051808303818588803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610c52919061111c565b5050610c94565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8b9061173d565b60405180910390fd5b5b5b5b505050565b60006040518060e0016040528060a28152602001611b8b60a29139604051602001610cc79190611573565b6040516020818303038152906040528051906020012082600001518360200151846040015185606001518051906020012086608001518760a00151604051602001610d12919061155c565b604051602081830303815290604052805190602001208860c001518960e001518a6101000151604051602001610d519a9998979695949392919061163c565b604051602081830303815290604052805190602001209050919050565b600081604051602001610d819190611573565b6040516020818303038152906040528051906020012083604051602001610da89190611573565b6040516020818303038152906040528051906020012014905092915050565b6000610dda610dd584611819565b6117f4565b90508083825260208201905082856020860282011115610df957600080fd5b60005b85811015610e295781610e0f8882610e71565b845260208401935060208301925050600181019050610dfc565b5050509392505050565b6000610e46610e4184611845565b6117f4565b905082815260208101848484011115610e5e57600080fd5b610e698482856119b0565b509392505050565b600081359050610e8081611b17565b92915050565b600082601f830112610e9757600080fd5b8135610ea7848260208601610dc7565b91505092915050565b600081519050610ebf81611b2e565b92915050565b600081359050610ed481611b45565b92915050565b600082601f830112610eeb57600080fd5b8135610efb848260208601610e33565b91505092915050565b60006101208284031215610f1757600080fd5b610f226101206117f4565b90506000610f3284828501610e71565b6000830152506020610f4684828501611010565b6020830152506040610f5a84828501611010565b604083015250606082013567ffffffffffffffff811115610f7a57600080fd5b610f8684828501610eda565b6060830152506080610f9a84828501610e71565b60808301525060a082013567ffffffffffffffff811115610fba57600080fd5b610fc684828501610e86565b60a08301525060c0610fda84828501611010565b60c08301525060e0610fee84828501611010565b60e08301525061010061100384828501611010565b6101008301525092915050565b60008135905061101f81611b5c565b92915050565b60008151905061103481611b5c565b92915050565b60008135905061104981611b73565b92915050565b60006020828403121561106157600080fd5b600061106f84828501610e71565b91505092915050565b60006020828403121561108a57600080fd5b600061109884828501610eb0565b91505092915050565b600080600080608085870312156110b757600080fd5b600085013567ffffffffffffffff8111156110d157600080fd5b6110dd87828801610f04565b94505060206110ee8782880161103a565b93505060406110ff87828801610ec5565b925050606061111087828801610ec5565b91505092959194509250565b60006020828403121561112e57600080fd5b600061113c84828501611025565b91505092915050565b6000611151838361117b565b60208301905092915050565b61116681611942565b82525050565b61117581611942565b82525050565b61118481611942565b82525050565b600061119582611886565b61119f81856118b4565b93506111aa83611876565b8060005b838110156111db5781516111c28882611145565b97506111cd836118a7565b9250506001810190506111ae565b5085935050505092915050565b6111f181611960565b82525050565b61120861120382611960565b611a23565b82525050565b600061121982611891565b61122381856118bf565b93506112338185602086016119bf565b61123c81611a8b565b840191505092915050565b60006112528261189c565b61125c81856118e1565b935061126c8185602086016119bf565b80840191505092915050565b60006112856011836118d0565b915061129082611a9c565b602082019050919050565b60006112a86002836118e1565b91506112b382611ac5565b600282019050919050565b60006112cb600d836118d0565b91506112d682611aee565b602082019050919050565b600060a08301600083015184820360008601526112fe828261120e565b9150506020830151611313602086018261115d565b506040830151611326604086018261152f565b506060830151611339606086018261152f565b50608083015161134c608086018261152f565b508091505092915050565b6101008201600082015161136e600085018261115d565b506020820151611381602085018261115d565b5060408201516113946040850182611520565b5060608201516113a7606085018261115d565b5060808201516113ba608085018261152f565b5060a08201516113cd60a085018261152f565b5060c08201516113e060c085018261152f565b5060e08201516113f360e0850182611511565b50505050565b600060a0830160008301518482036000860152611416828261120e565b915050602083015161142b602086018261115d565b50604083015161143e604086018261152f565b506060830151611451606086018261152f565b506080830151611464608086018261152f565b508091505092915050565b61010082016000820151611486600085018261115d565b506020820151611499602085018261115d565b5060408201516114ac6040850182611520565b5060608201516114bf606085018261115d565b5060808201516114d2608085018261152f565b5060a08201516114e560a085018261152f565b5060c08201516114f860c085018261152f565b5060e082015161150b60e0850182611511565b50505050565b61151a8161196a565b82525050565b6115298161198a565b82525050565b61153881611999565b82525050565b61154781611999565b82525050565b611556816119a3565b82525050565b6000611568828461118a565b915081905092915050565b600061157f8284611247565b915081905092915050565b60006115958261129b565b91506115a182856111f7565b6020820191506115b182846111f7565b6020820191508190509392505050565b60006020820190506115d6600083018461116c565b92915050565b60006060820190506115f1600083018661116c565b6115fe602083018561116c565b61160b604083018461153e565b949350505050565b6000604082019050611628600083018561116c565b611635602083018461153e565b9392505050565b600061014082019050611652600083018d6111e8565b61165f602083018c61116c565b61166c604083018b61153e565b611679606083018a61153e565b61168660808301896111e8565b61169360a083018861116c565b6116a060c08301876111e8565b6116ad60e083018661153e565b6116bb61010083018561153e565b6116c961012083018461153e565b9b9a5050505050505050505050565b60006080820190506116ed60008301876111e8565b6116fa602083018661154d565b61170760408301856111e8565b61171460608301846111e8565b95945050505050565b6000602082019050818103600083015261173681611278565b9050919050565b60006020820190508181036000830152611756816112be565b9050919050565b6000602082019050818103600083015261177781846112e1565b905092915050565b6000610100820190506117956000830184611357565b92915050565b600060208201905081810360008301526117b581846113f9565b905092915050565b6000610100820190506117d3600083018461146f565b92915050565b60006020820190506117ee600083018461153e565b92915050565b60006117fe61180f565b905061180a82826119f2565b919050565b6000604051905090565b600067ffffffffffffffff82111561183457611833611a5c565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156118605761185f611a5c565b5b61186982611a8b565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006118f782611999565b915061190283611999565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561193757611936611a2d565b5b828201905092915050565b600061194d8261196a565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156119dd5780820151818401526020810190506119c2565b838111156119ec576000848401525b50505050565b6119fb82611a8b565b810181811067ffffffffffffffff82111715611a1a57611a19611a5c565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f756e696d706c656d656e74656400000000000000000000000000000000000000600082015250565b611b2081611942565b8114611b2b57600080fd5b50565b611b3781611954565b8114611b4257600080fd5b50565b611b4e81611960565b8114611b5957600080fd5b50565b611b6581611999565b8114611b7057600080fd5b50565b611b7c816119a3565b8114611b8757600080fd5b5056fe537761704f72646572286164647265737320726f757465722c75696e7432353620616d6f756e74496e2c75696e7432353620616d6f756e744f75742c737472696e67207472616465547970652c6164647265737320726563697069656e742c616464726573735b5d20706174682c75696e7420646561646c696e652c75696e74323536207371727450726963654c696d69745839362c75696e743235362066656529a2646970667358221220513414f840b784a2736c50757cc791ebc6bb2e5d75aa0ebcae40c8019d7e7e4464736f6c63430008040033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"}],"name":"liquidate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"resetStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"status","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"router","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"string","name":"tradeType","type":"string"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"sqrtPriceLimitX96","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"}],"internalType":"struct SwapOrder","name":"order","type":"tuple"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"verifyAndSend","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}