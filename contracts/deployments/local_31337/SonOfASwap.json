{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/SonOfASwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct SwapOrder {\\n    address router;\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    string tradeType; // enum? // \\\"v3_exactInputSingle\\\" | \\\"v3_exactOutputSingle\\\" | \\\"v3_exactInput\\\" | \\\"v3_exactOutput\\\" | \\\"v2_{methodName (there are quite a few)}\\\"\\n    address recipient;\\n    address[] path;\\n    uint256 deadline;\\n    // v3\\n    uint160 sqrtPriceLimitX96;\\n    uint24 fee;\\n}\\n\\ncontract SonOfASwap {\\n    uint256 public status;\\n    address private owner;\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    string private constant EIP712_DOMAIN =\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n    string private constant SWAPORDER =\\n        \\\"SwapOrder(address router,uint256 amountIn,uint256 amountOut,string tradeType,address recipient,address[] path,uint deadline,uint160 sqrtPriceLimitX96,uint24 fee)\\\";\\n\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(abi.encodePacked(EIP712_DOMAIN));\\n    bytes32 private constant SWAPORDER_TYPEHASH =\\n        keccak256(abi.encodePacked(SWAPORDER));\\n\\n    bytes32 private DOMAIN_SEPARATOR;\\n\\n    function getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n        status = 0;\\n        DOMAIN_SEPARATOR = hash(\\n            EIP712Domain({\\n                name: \\\"SonOfASwap\\\",\\n                version: \\\"1\\\",\\n                chainId: getChainID(),\\n                verifyingContract: address(this)\\n            })\\n        );\\n    }\\n\\n    receive() external payable {}\\n\\n    function hash(EIP712Domain memory eip712Domain)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(bytes(eip712Domain.name)),\\n                    keccak256(bytes(eip712Domain.version)),\\n                    eip712Domain.chainId,\\n                    eip712Domain.verifyingContract\\n                )\\n            );\\n    }\\n\\n    function hash(SwapOrder memory order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    SWAPORDER_TYPEHASH,\\n                    order.router,\\n                    order.amountIn,\\n                    order.amountOut,\\n                    keccak256(bytes(order.tradeType)),\\n                    order.recipient,\\n                    keccak256(abi.encodePacked(order.path)),\\n                    order.deadline,\\n                    order.sqrtPriceLimitX96,\\n                    order.fee\\n                )\\n            );\\n    }\\n\\n    function verify(\\n        SwapOrder memory order,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool) {\\n        // Note: we need to use `encodePacked` here instead of `encode`.\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hash(order))\\n        );\\n        address recovered = ecrecover(digest, v, r, s);\\n        return recovered == order.recipient;\\n    }\\n\\n    function stringsEqual(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (keccak256(abi.encodePacked((a))) ==\\n            keccak256(abi.encodePacked((b))));\\n    }\\n\\n    event ExactInputSingleSwap(address indexed recipient);\\n\\n    function sendOrder(SwapOrder memory order) internal {\\n        // instantiate router interface\\n        ISwapRouter router = ISwapRouter(order.router);\\n        // instantiate input token interface\\n        IERC20 tokenIn = IERC20(order.path[0]);\\n\\n        // transfer input token from user to (this)\\n        tokenIn.transferFrom(order.recipient, address(this), order.amountIn);\\n        // approve router to spend (this) tokenIn\\n        tokenIn.approve(order.router, order.amountIn);\\n\\n        // choose router method based on order type\\n        if (stringsEqual(order.tradeType, \\\"v3_exactInputSingle\\\")) {\\n            // encode function params based on order\\n            ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n                .ExactInputSingleParams(\\n                    order.path[0], // tokenIn\\n                    order.path[1], // tokenOut\\n                    order.fee, // fee\\n                    order.recipient, // recipient\\n                    order.deadline, // deadline\\n                    order.amountIn, // amountIn\\n                    order.amountOut, // amountOutMinimum\\n                    order.sqrtPriceLimitX96 // sqrtPriceLimitX96\\n                );\\n            emit ExactInputSingleSwap(order.recipient);\\n\\n            // send order to router\\n            uint256 amountOutActual = router.exactInputSingle{value: 0x0}(\\n                params\\n            );\\n            status = amountOutActual;\\n        } else if (stringsEqual(order.tradeType, \\\"v3_exactOutputSingle\\\")) {\\n            // router.exactOutputSingle(params);\\n            revert(\\\"unimplemented\\\");\\n        } else if (stringsEqual(order.tradeType, \\\"v3_exactInput\\\")) {\\n            // router.exactInput(params);\\n            revert(\\\"unimplemented\\\");\\n        } else if (stringsEqual(order.tradeType, \\\"v3_exactOutput\\\")) {\\n            // router.exactOutput(params);\\n            revert(\\\"unimplemented\\\");\\n        } else {\\n            // TODO: v2; ignore for now\\n            revert(\\\"unimplemented\\\");\\n        }\\n    }\\n\\n    function verifyAndSend(\\n        SwapOrder memory order,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        require(verify(order, v, r, s), \\\"invalid signature\\\");\\n        sendOrder(order);\\n        status = status + 1;\\n    }\\n\\n    // status reset for debugging\\n    function resetStatus() public {\\n        require(msg.sender == owner);\\n        status = 0;\\n    }\\n}\\n\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"}}}","address":"0xd082A6B86d982FC7eAC890CAf44Fc4B999a56805","bytecode":"0x60806040523480156200001157600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080819055506200011a60405180608001604052806040518060400160405280600a81526020017f536f6e4f6641537761700000000000000000000000000000000000000000000081525081526020016040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152508152602001620000ef6200012660201b60201c565b81526020013073ffffffffffffffffffffffffffffffffffffffff168152506200013360201b60201c565b60028190555062000340565b6000804690508091505090565b60006040518060800160405280605281526020016200190b6052913960405160200162000161919062000236565b6040516020818303038152906040528051906020012082600001518051906020012083602001518051906020012084604001518560600151604051602001620001af9594939291906200024f565b604051602081830303815290604052805190602001209050919050565b620001d781620002c2565b82525050565b620001e881620002d6565b82525050565b6000620001fb82620002ac565b620002078185620002b7565b9350620002198185602086016200030a565b80840191505092915050565b620002308162000300565b82525050565b6000620002448284620001ee565b915081905092915050565b600060a082019050620002666000830188620001dd565b620002756020830187620001dd565b620002846040830186620001dd565b62000293606083018562000225565b620002a26080830184620001cc565b9695505050505050565b600081519050919050565b600081905092915050565b6000620002cf82620002e0565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200032a5780820151818401526020810190506200030d565b838111156200033a576000848401525b50505050565b6115bb80620003506000396000f3fe6080604052600436106100385760003560e01c8063200d2ed2146100445780636a344e911461006f5780638c3c4c62146100985761003f565b3661003f57005b600080fd5b34801561005057600080fd5b506100596100af565b6040516100669190611121565b60405180910390f35b34801561007b57600080fd5b5061009660048036038101906100919190610c0d565b6100b5565b005b3480156100a457600080fd5b506100ad610124565b005b60005481565b6100c184848484610187565b610100576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f7906110c5565b60405180910390fd5b61010984610251565b60016000546101189190611218565b60008190555050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017e57600080fd5b60008081905550565b60008060025461019687610807565b6040516020016101a7929190610f4d565b6040516020818303038152906040528051906020012090506000600182878787604051600081526020016040526040516101e49493929190611080565b6020604051602081039080840390855afa158015610206573d6000803e3d6000fd5b505050602060405103519050866080015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161492505050949350505050565b60008160000151905060008260a0015160008151811061029a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff166323b872dd84608001513086602001516040518463ffffffff1660e01b81526004016102e993929190610f84565b602060405180830381600087803b15801561030357600080fd5b505af1158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190610be4565b508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3846000015185602001516040518363ffffffff1660e01b815260040161037f929190610fbb565b602060405180830381600087803b15801561039957600080fd5b505af11580156103ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d19190610be4565b5061041583606001516040518060400160405280601381526020017f76335f6578616374496e70757453696e676c65000000000000000000000000008152506108d9565b1561063e5760006040518061010001604052808560a00151600081518110610466577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a001516001815181106104c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16815260200185610100015162ffffff168152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185602001518152602001856040015181526020018560e0015173ffffffffffffffffffffffffffffffffffffffff168152509050836080015173ffffffffffffffffffffffffffffffffffffffff167f770f4a11f6c24545930bbc5474a63565195e3b062566b8ba6198fd98b7cd75a860405160405180910390a260008373ffffffffffffffffffffffffffffffffffffffff1663414bf3896000846040518363ffffffff1660e01b81526004016105dc9190611105565b6020604051808303818588803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061062e9190610c88565b9050806000819055505050610802565b61068183606001516040518060400160405280601481526020017f76335f65786163744f757470757453696e676c650000000000000000000000008152506108d9565b156106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b8906110e5565b60405180910390fd5b61070483606001516040518060400160405280600d81526020017f76335f6578616374496e707574000000000000000000000000000000000000008152506108d9565b15610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073b906110e5565b60405180910390fd5b61078783606001516040518060400160405280600e81526020017f76335f65786163744f75747075740000000000000000000000000000000000008152506108d9565b156107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be906110e5565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f9906110e5565b60405180910390fd5b505050565b60006040518060e0016040528060a181526020016114e560a191396040516020016108329190610f36565b6040516020818303038152906040528051906020012082600001518360200151846040015185606001518051906020012086608001518760a0015160405160200161087d9190610f1f565b604051602081830303815290604052805190602001208860c001518960e001518a61010001516040516020016108bc9a99989796959493929190610fe4565b604051602081830303815290604052805190602001209050919050565b6000816040516020016108ec9190610f36565b60405160208183030381529060405280519060200120836040516020016109139190610f36565b6040516020818303038152906040528051906020012014905092915050565b600061094561094084611161565b61113c565b9050808382526020820190508285602086028201111561096457600080fd5b60005b85811015610994578161097a88826109dc565b845260208401935060208301925050600181019050610967565b5050509392505050565b60006109b16109ac8461118d565b61113c565b9050828152602081018484840111156109c957600080fd5b6109d48482856112dc565b509392505050565b6000813590506109eb81611443565b92915050565b600082601f830112610a0257600080fd5b8135610a12848260208601610932565b91505092915050565b600081519050610a2a8161145a565b92915050565b600081359050610a3f81611471565b92915050565b600082601f830112610a5657600080fd5b8135610a6684826020860161099e565b91505092915050565b60006101208284031215610a8257600080fd5b610a8d61012061113c565b90506000610a9d848285016109dc565b6000830152506020610ab184828501610ba5565b6020830152506040610ac584828501610ba5565b604083015250606082013567ffffffffffffffff811115610ae557600080fd5b610af184828501610a45565b6060830152506080610b05848285016109dc565b60808301525060a082013567ffffffffffffffff811115610b2557600080fd5b610b31848285016109f1565b60a08301525060c0610b4584828501610ba5565b60c08301525060e0610b5984828501610b7b565b60e083015250610100610b6e84828501610b90565b6101008301525092915050565b600081359050610b8a81611488565b92915050565b600081359050610b9f8161149f565b92915050565b600081359050610bb4816114b6565b92915050565b600081519050610bc9816114b6565b92915050565b600081359050610bde816114cd565b92915050565b600060208284031215610bf657600080fd5b6000610c0484828501610a1b565b91505092915050565b60008060008060808587031215610c2357600080fd5b600085013567ffffffffffffffff811115610c3d57600080fd5b610c4987828801610a6f565b9450506020610c5a87828801610bcf565b9350506040610c6b87828801610a30565b9250506060610c7c87828801610a30565b91505092959194509250565b600060208284031215610c9a57600080fd5b6000610ca884828501610bba565b91505092915050565b6000610cbd8383610ce7565b60208301905092915050565b610cd28161126e565b82525050565b610ce18161126e565b82525050565b610cf08161126e565b82525050565b6000610d01826111ce565b610d0b81856111f1565b9350610d16836111be565b8060005b83811015610d47578151610d2e8882610cb1565b9750610d39836111e4565b925050600181019050610d1a565b5085935050505092915050565b610d5d8161128c565b82525050565b610d74610d6f8261128c565b61134f565b82525050565b6000610d85826111d9565b610d8f818561120d565b9350610d9f8185602086016112eb565b80840191505092915050565b6000610db86011836111fc565b9150610dc3826113c8565b602082019050919050565b6000610ddb60028361120d565b9150610de6826113f1565b600282019050919050565b6000610dfe600d836111fc565b9150610e098261141a565b602082019050919050565b61010082016000820151610e2b6000850182610cc9565b506020820151610e3e6020850182610cc9565b506040820151610e516040850182610ed4565b506060820151610e646060850182610cc9565b506080820151610e776080850182610ef2565b5060a0820151610e8a60a0850182610ef2565b5060c0820151610e9d60c0850182610ef2565b5060e0820151610eb060e0850182610eb6565b50505050565b610ebf81611296565b82525050565b610ece81611296565b82525050565b610edd816112b6565b82525050565b610eec816112b6565b82525050565b610efb816112c5565b82525050565b610f0a816112c5565b82525050565b610f19816112cf565b82525050565b6000610f2b8284610cf6565b915081905092915050565b6000610f428284610d7a565b915081905092915050565b6000610f5882610dce565b9150610f648285610d63565b602082019150610f748284610d63565b6020820191508190509392505050565b6000606082019050610f996000830186610cd8565b610fa66020830185610cd8565b610fb36040830184610f01565b949350505050565b6000604082019050610fd06000830185610cd8565b610fdd6020830184610f01565b9392505050565b600061014082019050610ffa600083018d610d54565b611007602083018c610cd8565b611014604083018b610f01565b611021606083018a610f01565b61102e6080830189610d54565b61103b60a0830188610cd8565b61104860c0830187610d54565b61105560e0830186610f01565b611063610100830185610ec5565b611071610120830184610ee3565b9b9a5050505050505050505050565b60006080820190506110956000830187610d54565b6110a26020830186610f10565b6110af6040830185610d54565b6110bc6060830184610d54565b95945050505050565b600060208201905081810360008301526110de81610dab565b9050919050565b600060208201905081810360008301526110fe81610df1565b9050919050565b60006101008201905061111b6000830184610e14565b92915050565b60006020820190506111366000830184610f01565b92915050565b6000611146611157565b9050611152828261131e565b919050565b6000604051905090565b600067ffffffffffffffff82111561117c5761117b611388565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111a8576111a7611388565b5b6111b1826113b7565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611223826112c5565b915061122e836112c5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561126357611262611359565b5b828201905092915050565b600061127982611296565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156113095780820151818401526020810190506112ee565b83811115611318576000848401525b50505050565b611327826113b7565b810181811067ffffffffffffffff8211171561134657611345611388565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f756e696d706c656d656e74656400000000000000000000000000000000000000600082015250565b61144c8161126e565b811461145757600080fd5b50565b61146381611280565b811461146e57600080fd5b50565b61147a8161128c565b811461148557600080fd5b50565b61149181611296565b811461149c57600080fd5b50565b6114a8816112b6565b81146114b357600080fd5b50565b6114bf816112c5565b81146114ca57600080fd5b50565b6114d6816112cf565b81146114e157600080fd5b5056fe537761704f72646572286164647265737320726f757465722c75696e7432353620616d6f756e74496e2c75696e7432353620616d6f756e744f75742c737472696e67207472616465547970652c6164647265737320726563697069656e742c616464726573735b5d20706174682c75696e7420646561646c696e652c75696e74313630207371727450726963654c696d69745839362c75696e7432342066656529a2646970667358221220d08cc0be72a3bb2df4ead80d257deec53a17ee8ef0cfa145bc26e3637e0de27664736f6c63430008040033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","deployedBytecode":"0x6080604052600436106100385760003560e01c8063200d2ed2146100445780636a344e911461006f5780638c3c4c62146100985761003f565b3661003f57005b600080fd5b34801561005057600080fd5b506100596100af565b6040516100669190611121565b60405180910390f35b34801561007b57600080fd5b5061009660048036038101906100919190610c0d565b6100b5565b005b3480156100a457600080fd5b506100ad610124565b005b60005481565b6100c184848484610187565b610100576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f7906110c5565b60405180910390fd5b61010984610251565b60016000546101189190611218565b60008190555050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017e57600080fd5b60008081905550565b60008060025461019687610807565b6040516020016101a7929190610f4d565b6040516020818303038152906040528051906020012090506000600182878787604051600081526020016040526040516101e49493929190611080565b6020604051602081039080840390855afa158015610206573d6000803e3d6000fd5b505050602060405103519050866080015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161492505050949350505050565b60008160000151905060008260a0015160008151811061029a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff166323b872dd84608001513086602001516040518463ffffffff1660e01b81526004016102e993929190610f84565b602060405180830381600087803b15801561030357600080fd5b505af1158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190610be4565b508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3846000015185602001516040518363ffffffff1660e01b815260040161037f929190610fbb565b602060405180830381600087803b15801561039957600080fd5b505af11580156103ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d19190610be4565b5061041583606001516040518060400160405280601381526020017f76335f6578616374496e70757453696e676c65000000000000000000000000008152506108d9565b1561063e5760006040518061010001604052808560a00151600081518110610466577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a001516001815181106104c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16815260200185610100015162ffffff168152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560c00151815260200185602001518152602001856040015181526020018560e0015173ffffffffffffffffffffffffffffffffffffffff168152509050836080015173ffffffffffffffffffffffffffffffffffffffff167f770f4a11f6c24545930bbc5474a63565195e3b062566b8ba6198fd98b7cd75a860405160405180910390a260008373ffffffffffffffffffffffffffffffffffffffff1663414bf3896000846040518363ffffffff1660e01b81526004016105dc9190611105565b6020604051808303818588803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061062e9190610c88565b9050806000819055505050610802565b61068183606001516040518060400160405280601481526020017f76335f65786163744f757470757453696e676c650000000000000000000000008152506108d9565b156106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b8906110e5565b60405180910390fd5b61070483606001516040518060400160405280600d81526020017f76335f6578616374496e707574000000000000000000000000000000000000008152506108d9565b15610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073b906110e5565b60405180910390fd5b61078783606001516040518060400160405280600e81526020017f76335f65786163744f75747075740000000000000000000000000000000000008152506108d9565b156107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be906110e5565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f9906110e5565b60405180910390fd5b505050565b60006040518060e0016040528060a181526020016114e560a191396040516020016108329190610f36565b6040516020818303038152906040528051906020012082600001518360200151846040015185606001518051906020012086608001518760a0015160405160200161087d9190610f1f565b604051602081830303815290604052805190602001208860c001518960e001518a61010001516040516020016108bc9a99989796959493929190610fe4565b604051602081830303815290604052805190602001209050919050565b6000816040516020016108ec9190610f36565b60405160208183030381529060405280519060200120836040516020016109139190610f36565b6040516020818303038152906040528051906020012014905092915050565b600061094561094084611161565b61113c565b9050808382526020820190508285602086028201111561096457600080fd5b60005b85811015610994578161097a88826109dc565b845260208401935060208301925050600181019050610967565b5050509392505050565b60006109b16109ac8461118d565b61113c565b9050828152602081018484840111156109c957600080fd5b6109d48482856112dc565b509392505050565b6000813590506109eb81611443565b92915050565b600082601f830112610a0257600080fd5b8135610a12848260208601610932565b91505092915050565b600081519050610a2a8161145a565b92915050565b600081359050610a3f81611471565b92915050565b600082601f830112610a5657600080fd5b8135610a6684826020860161099e565b91505092915050565b60006101208284031215610a8257600080fd5b610a8d61012061113c565b90506000610a9d848285016109dc565b6000830152506020610ab184828501610ba5565b6020830152506040610ac584828501610ba5565b604083015250606082013567ffffffffffffffff811115610ae557600080fd5b610af184828501610a45565b6060830152506080610b05848285016109dc565b60808301525060a082013567ffffffffffffffff811115610b2557600080fd5b610b31848285016109f1565b60a08301525060c0610b4584828501610ba5565b60c08301525060e0610b5984828501610b7b565b60e083015250610100610b6e84828501610b90565b6101008301525092915050565b600081359050610b8a81611488565b92915050565b600081359050610b9f8161149f565b92915050565b600081359050610bb4816114b6565b92915050565b600081519050610bc9816114b6565b92915050565b600081359050610bde816114cd565b92915050565b600060208284031215610bf657600080fd5b6000610c0484828501610a1b565b91505092915050565b60008060008060808587031215610c2357600080fd5b600085013567ffffffffffffffff811115610c3d57600080fd5b610c4987828801610a6f565b9450506020610c5a87828801610bcf565b9350506040610c6b87828801610a30565b9250506060610c7c87828801610a30565b91505092959194509250565b600060208284031215610c9a57600080fd5b6000610ca884828501610bba565b91505092915050565b6000610cbd8383610ce7565b60208301905092915050565b610cd28161126e565b82525050565b610ce18161126e565b82525050565b610cf08161126e565b82525050565b6000610d01826111ce565b610d0b81856111f1565b9350610d16836111be565b8060005b83811015610d47578151610d2e8882610cb1565b9750610d39836111e4565b925050600181019050610d1a565b5085935050505092915050565b610d5d8161128c565b82525050565b610d74610d6f8261128c565b61134f565b82525050565b6000610d85826111d9565b610d8f818561120d565b9350610d9f8185602086016112eb565b80840191505092915050565b6000610db86011836111fc565b9150610dc3826113c8565b602082019050919050565b6000610ddb60028361120d565b9150610de6826113f1565b600282019050919050565b6000610dfe600d836111fc565b9150610e098261141a565b602082019050919050565b61010082016000820151610e2b6000850182610cc9565b506020820151610e3e6020850182610cc9565b506040820151610e516040850182610ed4565b506060820151610e646060850182610cc9565b506080820151610e776080850182610ef2565b5060a0820151610e8a60a0850182610ef2565b5060c0820151610e9d60c0850182610ef2565b5060e0820151610eb060e0850182610eb6565b50505050565b610ebf81611296565b82525050565b610ece81611296565b82525050565b610edd816112b6565b82525050565b610eec816112b6565b82525050565b610efb816112c5565b82525050565b610f0a816112c5565b82525050565b610f19816112cf565b82525050565b6000610f2b8284610cf6565b915081905092915050565b6000610f428284610d7a565b915081905092915050565b6000610f5882610dce565b9150610f648285610d63565b602082019150610f748284610d63565b6020820191508190509392505050565b6000606082019050610f996000830186610cd8565b610fa66020830185610cd8565b610fb36040830184610f01565b949350505050565b6000604082019050610fd06000830185610cd8565b610fdd6020830184610f01565b9392505050565b600061014082019050610ffa600083018d610d54565b611007602083018c610cd8565b611014604083018b610f01565b611021606083018a610f01565b61102e6080830189610d54565b61103b60a0830188610cd8565b61104860c0830187610d54565b61105560e0830186610f01565b611063610100830185610ec5565b611071610120830184610ee3565b9b9a5050505050505050505050565b60006080820190506110956000830187610d54565b6110a26020830186610f10565b6110af6040830185610d54565b6110bc6060830184610d54565b95945050505050565b600060208201905081810360008301526110de81610dab565b9050919050565b600060208201905081810360008301526110fe81610df1565b9050919050565b60006101008201905061111b6000830184610e14565b92915050565b60006020820190506111366000830184610f01565b92915050565b6000611146611157565b9050611152828261131e565b919050565b6000604051905090565b600067ffffffffffffffff82111561117c5761117b611388565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111a8576111a7611388565b5b6111b1826113b7565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611223826112c5565b915061122e836112c5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561126357611262611359565b5b828201905092915050565b600061127982611296565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156113095780820151818401526020810190506112ee565b83811115611318576000848401525b50505050565b611327826113b7565b810181811067ffffffffffffffff8211171561134657611345611388565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f756e696d706c656d656e74656400000000000000000000000000000000000000600082015250565b61144c8161126e565b811461145757600080fd5b50565b61146381611280565b811461146e57600080fd5b50565b61147a8161128c565b811461148557600080fd5b50565b61149181611296565b811461149c57600080fd5b50565b6114a8816112b6565b81146114b357600080fd5b50565b6114bf816112c5565b81146114ca57600080fd5b50565b6114d6816112cf565b81146114e157600080fd5b5056fe537761704f72646572286164647265737320726f757465722c75696e7432353620616d6f756e74496e2c75696e7432353620616d6f756e744f75742c737472696e67207472616465547970652c6164647265737320726563697069656e742c616464726573735b5d20706174682c75696e7420646561646c696e652c75696e74313630207371727450726963654c696d69745839362c75696e7432342066656529a2646970667358221220d08cc0be72a3bb2df4ead80d257deec53a17ee8ef0cfa145bc26e3637e0de27664736f6c63430008040033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"}],"name":"ExactInputSingleSwap","type":"event"},{"inputs":[],"name":"resetStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"status","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"router","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"string","name":"tradeType","type":"string"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"},{"internalType":"uint24","name":"fee","type":"uint24"}],"internalType":"struct SwapOrder","name":"order","type":"tuple"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"verifyAndSend","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}